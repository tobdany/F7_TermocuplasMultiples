
F7_MultiplesTermocuplas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058b4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005a84  08005a84  00006a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b28  08005b28  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005b28  08005b28  00006b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b30  08005b30  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b30  08005b30  00006b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b34  08005b34  00006b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005b38  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  2000005c  08005b94  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08005b94  000072e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2bb  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba6  00000000  00000000  00013347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  00014ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000741  00000000  00000000  00015868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026455  00000000  00000000  00015fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1a2  00000000  00000000  0003c3fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eaf40  00000000  00000000  000495a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001344e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c48  00000000  00000000  00134524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  0013716c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005a6c 	.word	0x08005a6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08005a6c 	.word	0x08005a6c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b988 	b.w	8000e24 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	468e      	mov	lr, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	4688      	mov	r8, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4617      	mov	r7, r2
 8000b40:	d962      	bls.n	8000c08 <__udivmoddi4+0xdc>
 8000b42:	fab2 f682 	clz	r6, r2
 8000b46:	b14e      	cbz	r6, 8000b5c <__udivmoddi4+0x30>
 8000b48:	f1c6 0320 	rsb	r3, r6, #32
 8000b4c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b50:	fa20 f303 	lsr.w	r3, r0, r3
 8000b54:	40b7      	lsls	r7, r6
 8000b56:	ea43 0808 	orr.w	r8, r3, r8
 8000b5a:	40b4      	lsls	r4, r6
 8000b5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b60:	fa1f fc87 	uxth.w	ip, r7
 8000b64:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b68:	0c23      	lsrs	r3, r4, #16
 8000b6a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b72:	fb01 f20c 	mul.w	r2, r1, ip
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b80:	f080 80ea 	bcs.w	8000d58 <__udivmoddi4+0x22c>
 8000b84:	429a      	cmp	r2, r3
 8000b86:	f240 80e7 	bls.w	8000d58 <__udivmoddi4+0x22c>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	443b      	add	r3, r7
 8000b8e:	1a9a      	subs	r2, r3, r2
 8000b90:	b2a3      	uxth	r3, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b9e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba2:	459c      	cmp	ip, r3
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x8e>
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bac:	f080 80d6 	bcs.w	8000d5c <__udivmoddi4+0x230>
 8000bb0:	459c      	cmp	ip, r3
 8000bb2:	f240 80d3 	bls.w	8000d5c <__udivmoddi4+0x230>
 8000bb6:	443b      	add	r3, r7
 8000bb8:	3802      	subs	r0, #2
 8000bba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bbe:	eba3 030c 	sub.w	r3, r3, ip
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11d      	cbz	r5, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40f3      	lsrs	r3, r6
 8000bc8:	2200      	movs	r2, #0
 8000bca:	e9c5 3200 	strd	r3, r2, [r5]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d905      	bls.n	8000be2 <__udivmoddi4+0xb6>
 8000bd6:	b10d      	cbz	r5, 8000bdc <__udivmoddi4+0xb0>
 8000bd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4608      	mov	r0, r1
 8000be0:	e7f5      	b.n	8000bce <__udivmoddi4+0xa2>
 8000be2:	fab3 f183 	clz	r1, r3
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d146      	bne.n	8000c78 <__udivmoddi4+0x14c>
 8000bea:	4573      	cmp	r3, lr
 8000bec:	d302      	bcc.n	8000bf4 <__udivmoddi4+0xc8>
 8000bee:	4282      	cmp	r2, r0
 8000bf0:	f200 8105 	bhi.w	8000dfe <__udivmoddi4+0x2d2>
 8000bf4:	1a84      	subs	r4, r0, r2
 8000bf6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	4690      	mov	r8, r2
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d0e5      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c02:	e9c5 4800 	strd	r4, r8, [r5]
 8000c06:	e7e2      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f000 8090 	beq.w	8000d2e <__udivmoddi4+0x202>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	f040 80a4 	bne.w	8000d60 <__udivmoddi4+0x234>
 8000c18:	1a8a      	subs	r2, r1, r2
 8000c1a:	0c03      	lsrs	r3, r0, #16
 8000c1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c20:	b280      	uxth	r0, r0
 8000c22:	b2bc      	uxth	r4, r7
 8000c24:	2101      	movs	r1, #1
 8000c26:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c2a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c32:	fb04 f20c 	mul.w	r2, r4, ip
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d907      	bls.n	8000c4a <__udivmoddi4+0x11e>
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x11c>
 8000c42:	429a      	cmp	r2, r3
 8000c44:	f200 80e0 	bhi.w	8000e08 <__udivmoddi4+0x2dc>
 8000c48:	46c4      	mov	ip, r8
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c50:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c54:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c58:	fb02 f404 	mul.w	r4, r2, r4
 8000c5c:	429c      	cmp	r4, r3
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x144>
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x142>
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	f200 80ca 	bhi.w	8000e02 <__udivmoddi4+0x2d6>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	1b1b      	subs	r3, r3, r4
 8000c72:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c76:	e7a5      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c78:	f1c1 0620 	rsb	r6, r1, #32
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c82:	431f      	orrs	r7, r3
 8000c84:	fa0e f401 	lsl.w	r4, lr, r1
 8000c88:	fa20 f306 	lsr.w	r3, r0, r6
 8000c8c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c90:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c94:	4323      	orrs	r3, r4
 8000c96:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9a:	fa1f fc87 	uxth.w	ip, r7
 8000c9e:	fbbe f0f9 	udiv	r0, lr, r9
 8000ca2:	0c1c      	lsrs	r4, r3, #16
 8000ca4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ca8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cac:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb6:	d909      	bls.n	8000ccc <__udivmoddi4+0x1a0>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cbe:	f080 809c 	bcs.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f240 8099 	bls.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	443c      	add	r4, r7
 8000ccc:	eba4 040e 	sub.w	r4, r4, lr
 8000cd0:	fa1f fe83 	uxth.w	lr, r3
 8000cd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cdc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ce0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ce4:	45a4      	cmp	ip, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1ce>
 8000ce8:	193c      	adds	r4, r7, r4
 8000cea:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cee:	f080 8082 	bcs.w	8000df6 <__udivmoddi4+0x2ca>
 8000cf2:	45a4      	cmp	ip, r4
 8000cf4:	d97f      	bls.n	8000df6 <__udivmoddi4+0x2ca>
 8000cf6:	3b02      	subs	r3, #2
 8000cf8:	443c      	add	r4, r7
 8000cfa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cfe:	eba4 040c 	sub.w	r4, r4, ip
 8000d02:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d06:	4564      	cmp	r4, ip
 8000d08:	4673      	mov	r3, lr
 8000d0a:	46e1      	mov	r9, ip
 8000d0c:	d362      	bcc.n	8000dd4 <__udivmoddi4+0x2a8>
 8000d0e:	d05f      	beq.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d10:	b15d      	cbz	r5, 8000d2a <__udivmoddi4+0x1fe>
 8000d12:	ebb8 0203 	subs.w	r2, r8, r3
 8000d16:	eb64 0409 	sbc.w	r4, r4, r9
 8000d1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d1e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d22:	431e      	orrs	r6, r3
 8000d24:	40cc      	lsrs	r4, r1
 8000d26:	e9c5 6400 	strd	r6, r4, [r5]
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e74f      	b.n	8000bce <__udivmoddi4+0xa2>
 8000d2e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d32:	0c01      	lsrs	r1, r0, #16
 8000d34:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d38:	b280      	uxth	r0, r0
 8000d3a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4638      	mov	r0, r7
 8000d42:	463c      	mov	r4, r7
 8000d44:	46b8      	mov	r8, r7
 8000d46:	46be      	mov	lr, r7
 8000d48:	2620      	movs	r6, #32
 8000d4a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d4e:	eba2 0208 	sub.w	r2, r2, r8
 8000d52:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d56:	e766      	b.n	8000c26 <__udivmoddi4+0xfa>
 8000d58:	4601      	mov	r1, r0
 8000d5a:	e718      	b.n	8000b8e <__udivmoddi4+0x62>
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	e72c      	b.n	8000bba <__udivmoddi4+0x8e>
 8000d60:	f1c6 0220 	rsb	r2, r6, #32
 8000d64:	fa2e f302 	lsr.w	r3, lr, r2
 8000d68:	40b7      	lsls	r7, r6
 8000d6a:	40b1      	lsls	r1, r6
 8000d6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d74:	430a      	orrs	r2, r1
 8000d76:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d7a:	b2bc      	uxth	r4, r7
 8000d7c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d80:	0c11      	lsrs	r1, r2, #16
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb08 f904 	mul.w	r9, r8, r4
 8000d8a:	40b0      	lsls	r0, r6
 8000d8c:	4589      	cmp	r9, r1
 8000d8e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d92:	b280      	uxth	r0, r0
 8000d94:	d93e      	bls.n	8000e14 <__udivmoddi4+0x2e8>
 8000d96:	1879      	adds	r1, r7, r1
 8000d98:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d9c:	d201      	bcs.n	8000da2 <__udivmoddi4+0x276>
 8000d9e:	4589      	cmp	r9, r1
 8000da0:	d81f      	bhi.n	8000de2 <__udivmoddi4+0x2b6>
 8000da2:	eba1 0109 	sub.w	r1, r1, r9
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fb09 f804 	mul.w	r8, r9, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	b292      	uxth	r2, r2
 8000db4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000db8:	4542      	cmp	r2, r8
 8000dba:	d229      	bcs.n	8000e10 <__udivmoddi4+0x2e4>
 8000dbc:	18ba      	adds	r2, r7, r2
 8000dbe:	f109 31ff 	add.w	r1, r9, #4294967295
 8000dc2:	d2c4      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc4:	4542      	cmp	r2, r8
 8000dc6:	d2c2      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc8:	f1a9 0102 	sub.w	r1, r9, #2
 8000dcc:	443a      	add	r2, r7
 8000dce:	e7be      	b.n	8000d4e <__udivmoddi4+0x222>
 8000dd0:	45f0      	cmp	r8, lr
 8000dd2:	d29d      	bcs.n	8000d10 <__udivmoddi4+0x1e4>
 8000dd4:	ebbe 0302 	subs.w	r3, lr, r2
 8000dd8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ddc:	3801      	subs	r0, #1
 8000dde:	46e1      	mov	r9, ip
 8000de0:	e796      	b.n	8000d10 <__udivmoddi4+0x1e4>
 8000de2:	eba7 0909 	sub.w	r9, r7, r9
 8000de6:	4449      	add	r1, r9
 8000de8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dec:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df0:	fb09 f804 	mul.w	r8, r9, r4
 8000df4:	e7db      	b.n	8000dae <__udivmoddi4+0x282>
 8000df6:	4673      	mov	r3, lr
 8000df8:	e77f      	b.n	8000cfa <__udivmoddi4+0x1ce>
 8000dfa:	4650      	mov	r0, sl
 8000dfc:	e766      	b.n	8000ccc <__udivmoddi4+0x1a0>
 8000dfe:	4608      	mov	r0, r1
 8000e00:	e6fd      	b.n	8000bfe <__udivmoddi4+0xd2>
 8000e02:	443b      	add	r3, r7
 8000e04:	3a02      	subs	r2, #2
 8000e06:	e733      	b.n	8000c70 <__udivmoddi4+0x144>
 8000e08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e0c:	443b      	add	r3, r7
 8000e0e:	e71c      	b.n	8000c4a <__udivmoddi4+0x11e>
 8000e10:	4649      	mov	r1, r9
 8000e12:	e79c      	b.n	8000d4e <__udivmoddi4+0x222>
 8000e14:	eba1 0109 	sub.w	r1, r1, r9
 8000e18:	46c4      	mov	ip, r8
 8000e1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1e:	fb09 f804 	mul.w	r8, r9, r4
 8000e22:	e7c4      	b.n	8000dae <__udivmoddi4+0x282>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <MAX31856_Init>:
#include <math.h>
#include <stdio.h>


// --- Funciones internas de bajo nivel para comunicación SPI ---
bool MAX31856_Init(Max31856_HandleTypeDef* hmax, SPI_HandleTypeDef* hspi, GPIO_TypeDef* cs_port, uint16_t cs_pin) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	807b      	strh	r3, [r7, #2]
  hmax->hspi = hspi;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	68ba      	ldr	r2, [r7, #8]
 8000e3a:	601a      	str	r2, [r3, #0]
  hmax->cs_port = cs_port;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	605a      	str	r2, [r3, #4]
  hmax->cs_pin = cs_pin;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	887a      	ldrh	r2, [r7, #2]
 8000e46:	811a      	strh	r2, [r3, #8]

  HAL_GPIO_WritePin(hmax->cs_port, hmax->cs_pin, GPIO_PIN_SET);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	6858      	ldr	r0, [r3, #4]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	891b      	ldrh	r3, [r3, #8]
 8000e50:	2201      	movs	r2, #1
 8000e52:	4619      	mov	r1, r3
 8000e54:	f001 fc54 	bl	8002700 <HAL_GPIO_WritePin>
  hmax->initialized = true;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	72da      	strb	r2, [r3, #11]

  // Configuración inicial del sensor MAX31856
  // Desactiva la máscara de fallas (assert on any fault)
  writeRegister8(hmax, MAX31856_MASK_REG, 0x0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2102      	movs	r1, #2
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f000 f84b 	bl	8000efe <writeRegister8>

  // Habilita la detección de fallas de circuito abierto
  writeRegister8(hmax, MAX31856_CR0_REG, MAX31856_CR0_OCFAULT0);
 8000e68:	2210      	movs	r2, #16
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	68f8      	ldr	r0, [r7, #12]
 8000e6e:	f000 f846 	bl	8000efe <writeRegister8>

  // Establece el offset de temperatura de la unión fría a cero
  writeRegister8(hmax, MAX31856_CJTO_REG, 0x0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2109      	movs	r1, #9
 8000e76:	68f8      	ldr	r0, [r7, #12]
 8000e78:	f000 f841 	bl	8000efe <writeRegister8>

  MAX31856_SetThermocoupleType(hmax, MAX31856_TCTYPE_K);
 8000e7c:	2103      	movs	r1, #3
 8000e7e:	68f8      	ldr	r0, [r7, #12]
 8000e80:	f000 f8d6 	bl	8001030 <MAX31856_SetThermocoupleType>
  MAX31856_SetConversionMode(hmax, MAX31856_CONTINUOUS);
 8000e84:	2102      	movs	r1, #2
 8000e86:	68f8      	ldr	r0, [r7, #12]
 8000e88:	f000 f8a4 	bl	8000fd4 <MAX31856_SetConversionMode>

  return hmax->initialized;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	7adb      	ldrb	r3, [r3, #11]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <readRegisterN>:
  * @param  addr: Dirección del registro a leer (MSB=0 para lectura).
  * @param  buffer: Puntero al buffer donde se almacenarán los datos leídos.
  * @param  n: Número de bytes a leer.
  * @retval None
  */
void readRegisterN(Max31856_HandleTypeDef* hmax, uint8_t addr, uint8_t buffer[], uint8_t n) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	607a      	str	r2, [r7, #4]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	72fb      	strb	r3, [r7, #11]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	72bb      	strb	r3, [r7, #10]
  addr &= 0x7F; // MSB=0 para lectura, asegura que el bit superior no esté seteado
 8000eac:	7afb      	ldrb	r3, [r7, #11]
 8000eae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	72fb      	strb	r3, [r7, #11]


  HAL_GPIO_WritePin(hmax->cs_port, hmax->cs_pin, GPIO_PIN_RESET);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6858      	ldr	r0, [r3, #4]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	891b      	ldrh	r3, [r3, #8]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f001 fc1d 	bl	8002700 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hmax->hspi, &addr, 1, SPI_DELAY);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6818      	ldr	r0, [r3, #0]
 8000eca:	f107 010b 	add.w	r1, r7, #11
 8000ece:	23ff      	movs	r3, #255	@ 0xff
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f002 fd54 	bl	800397e <HAL_SPI_Transmit>
  HAL_SPI_Receive(hmax->hspi, buffer, n, SPI_DELAY);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	6818      	ldr	r0, [r3, #0]
 8000eda:	7abb      	ldrb	r3, [r7, #10]
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	23ff      	movs	r3, #255	@ 0xff
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	f002 fec2 	bl	8003c6a <HAL_SPI_Receive>
  HAL_GPIO_WritePin(hmax->cs_port, hmax->cs_pin, GPIO_PIN_SET);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6858      	ldr	r0, [r3, #4]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	891b      	ldrh	r3, [r3, #8]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f001 fc05 	bl	8002700 <HAL_GPIO_WritePin>
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <writeRegister8>:
  * @param  hmax: Puntero a la estructura de handle del sensor MAX31856.
  * @param  addr: Dirección del registro a escribir (MSB=1 para escritura).
  * @param  data: Byte de datos a escribir.
  * @retval None
  */
void writeRegister8(Max31856_HandleTypeDef* hmax, uint8_t addr, uint8_t data) {
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b084      	sub	sp, #16
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	460b      	mov	r3, r1
 8000f08:	70fb      	strb	r3, [r7, #3]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	70bb      	strb	r3, [r7, #2]
  addr |= 0x80; // MSB=1 para escritura, asegura que el bit superior esté seteado
 8000f0e:	78fb      	ldrb	r3, [r7, #3]
 8000f10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f14:	70fb      	strb	r3, [r7, #3]

  uint8_t buffer[2] = {addr, data};
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	733b      	strb	r3, [r7, #12]
 8000f1a:	78bb      	ldrb	r3, [r7, #2]
 8000f1c:	737b      	strb	r3, [r7, #13]

  // Baja el pin CS del sensor específico para seleccionarlo
  HAL_GPIO_WritePin(hmax->cs_port, hmax->cs_pin, GPIO_PIN_RESET);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6858      	ldr	r0, [r3, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	891b      	ldrh	r3, [r3, #8]
 8000f26:	2200      	movs	r2, #0
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f001 fbe9 	bl	8002700 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hmax->hspi, buffer, 2, SPI_DELAY);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6818      	ldr	r0, [r3, #0]
 8000f32:	f107 010c 	add.w	r1, r7, #12
 8000f36:	23ff      	movs	r3, #255	@ 0xff
 8000f38:	2202      	movs	r2, #2
 8000f3a:	f002 fd20 	bl	800397e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(hmax->cs_port, hmax->cs_pin, GPIO_PIN_SET);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6858      	ldr	r0, [r3, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	891b      	ldrh	r3, [r3, #8]
 8000f46:	2201      	movs	r2, #1
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f001 fbd9 	bl	8002700 <HAL_GPIO_WritePin>
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <readRegister8>:
  * @brief  Lee un byte de un registro del MAX31856.
  * @param  hmax: Puntero a la estructura de handle del sensor MAX31856.
  * @param  addr: Dirección del registro a leer.
  * @retval El byte leído del registro.
  */
uint8_t readRegister8(Max31856_HandleTypeDef* hmax, uint8_t addr) {
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	73fb      	strb	r3, [r7, #15]
  readRegisterN(hmax, addr, &ret, 1);
 8000f66:	f107 020f 	add.w	r2, r7, #15
 8000f6a:	78f9      	ldrb	r1, [r7, #3]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ff92 	bl	8000e98 <readRegisterN>
  return ret;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <readRegister24>:
  * @brief  Lee 24 bits (3 bytes) de un registro del MAX31856.
  * @param  hmax: Puntero a la estructura de handle del sensor MAX31856.
  * @param  addr: Dirección del registro a leer.
  * @retval Los 24 bits leídos del registro.
  */
uint32_t readRegister24(Max31856_HandleTypeDef* hmax, uint8_t addr) {
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	460b      	mov	r3, r1
 8000f88:	70fb      	strb	r3, [r7, #3]
  uint8_t buffer[3] = {0, 0, 0};
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	2100      	movs	r1, #0
 8000f90:	460a      	mov	r2, r1
 8000f92:	801a      	strh	r2, [r3, #0]
 8000f94:	460a      	mov	r2, r1
 8000f96:	709a      	strb	r2, [r3, #2]
  readRegisterN(hmax, addr, buffer, 3);
 8000f98:	f107 0208 	add.w	r2, r7, #8
 8000f9c:	78f9      	ldrb	r1, [r7, #3]
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ff79 	bl	8000e98 <readRegisterN>

  uint32_t ret = (uint32_t)buffer[0];
 8000fa6:	7a3b      	ldrb	r3, [r7, #8]
 8000fa8:	60fb      	str	r3, [r7, #12]
  ret <<= 8;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	60fb      	str	r3, [r7, #12]
  ret |= buffer[1];
 8000fb0:	7a7b      	ldrb	r3, [r7, #9]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
  ret <<= 8;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	60fb      	str	r3, [r7, #12]
  ret |= buffer[2];
 8000fc0:	7abb      	ldrb	r3, [r7, #10]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]

  return ret;
 8000fca:	68fb      	ldr	r3, [r7, #12]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <MAX31856_SetConversionMode>:
  * @brief  Establece el modo de conversión del sensor (One-Shot o Continuo).
  * @param  hmax: Puntero a la estructura de handle del sensor MAX31856.
  * @param  mode: Modo de conversión a establecer.
  * @retval None
  */
void MAX31856_SetConversionMode(Max31856_HandleTypeDef* hmax, max31856_conversion_mode_t mode) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	70fb      	strb	r3, [r7, #3]
  hmax->conversionMode = mode;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	78fa      	ldrb	r2, [r7, #3]
 8000fe4:	729a      	strb	r2, [r3, #10]
  uint8_t t = readRegister8(hmax, MAX31856_CR0_REG); // Obtiene el valor actual del registro
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ffb4 	bl	8000f56 <readRegister8>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	73fb      	strb	r3, [r7, #15]
  if (hmax->conversionMode == MAX31856_CONTINUOUS) {
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7a9b      	ldrb	r3, [r3, #10]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d108      	bne.n	800100c <MAX31856_SetConversionMode+0x38>
    t |= MAX31856_CR0_AUTOCONVERT; // Enciende la conversión automática
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001000:	73fb      	strb	r3, [r7, #15]
    t &= ~MAX31856_CR0_1SHOT;      // Apaga el modo one-shot
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e007      	b.n	800101c <MAX31856_SetConversionMode+0x48>
  } else {
    t &= ~MAX31856_CR0_AUTOCONVERT; // Apaga la conversión automática
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001012:	73fb      	strb	r3, [r7, #15]
    t |= MAX31856_CR0_1SHOT;        // Enciende el modo one-shot
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800101a:	73fb      	strb	r3, [r7, #15]
  }
  writeRegister8(hmax, MAX31856_CR0_REG, t); // Escribe el valor de vuelta al registro
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	461a      	mov	r2, r3
 8001020:	2100      	movs	r1, #0
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ff6b 	bl	8000efe <writeRegister8>
}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <MAX31856_SetThermocoupleType>:
  * @brief  Establece el tipo de termopar para el sensor.
  * @param  hmax: Puntero a la estructura de handle del sensor MAX31856.
  * @param  type: Tipo de termopar a establecer.
  * @retval None
  */
void MAX31856_SetThermocoupleType(Max31856_HandleTypeDef* hmax, max31856_thermocoupletype_t type) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	70fb      	strb	r3, [r7, #3]
  uint8_t t = readRegister8(hmax, MAX31856_CR1_REG);
 800103c:	2101      	movs	r1, #1
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ff89 	bl	8000f56 <readRegister8>
 8001044:	4603      	mov	r3, r0
 8001046:	73fb      	strb	r3, [r7, #15]
  t &= 0xF0; // Enmascara los 4 bits inferiores
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	f023 030f 	bic.w	r3, r3, #15
 800104e:	73fb      	strb	r3, [r7, #15]
  t |= (uint8_t)type & 0x0F;
 8001050:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001054:	f003 030f 	and.w	r3, r3, #15
 8001058:	b25a      	sxtb	r2, r3
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	4313      	orrs	r3, r2
 8001060:	b25b      	sxtb	r3, r3
 8001062:	73fb      	strb	r3, [r7, #15]
  writeRegister8(hmax, MAX31856_CR1_REG, t);
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	461a      	mov	r2, r3
 8001068:	2101      	movs	r1, #1
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ff47 	bl	8000efe <writeRegister8>
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <MAX31856_TriggerOneShot>:
/**
  * @brief  Dispara una conversión One-Shot en el sensor.
  * @param  hmax: Puntero a la estructura de handle del sensor MAX31856.
  * @retval None
  */
void MAX31856_TriggerOneShot(Max31856_HandleTypeDef* hmax) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if (hmax->conversionMode == MAX31856_CONTINUOUS)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	7a9b      	ldrb	r3, [r3, #10]
 8001084:	2b02      	cmp	r3, #2
 8001086:	d014      	beq.n	80010b2 <MAX31856_TriggerOneShot+0x3a>
    return; // No se dispara one-shot si está en modo continuo

  uint8_t t = readRegister8(hmax, MAX31856_CR0_REG); // Obtiene el valor actual del registro
 8001088:	2100      	movs	r1, #0
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ff63 	bl	8000f56 <readRegister8>
 8001090:	4603      	mov	r3, r0
 8001092:	73fb      	strb	r3, [r7, #15]
  t &= ~MAX31856_CR0_AUTOCONVERT;              // Apaga la conversión automática
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800109a:	73fb      	strb	r3, [r7, #15]
  t |= MAX31856_CR0_1SHOT;                     // Enciende el modo one-shot
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010a2:	73fb      	strb	r3, [r7, #15]
  writeRegister8(hmax, MAX31856_CR0_REG, t);   // Escribe el valor de vuelta al registro
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	461a      	mov	r2, r3
 80010a8:	2100      	movs	r1, #0
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ff27 	bl	8000efe <writeRegister8>
 80010b0:	e000      	b.n	80010b4 <MAX31856_TriggerOneShot+0x3c>
    return; // No se dispara one-shot si está en modo continuo
 80010b2:	bf00      	nop
                                       // La conversión comienza cuando CS se pone en alto (después de la escritura)
}
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <MAX31856_ConversionComplete>:
/**
  * @brief  Verifica si la conversión de temperatura ha sido completada.
  * @param  hmax: Puntero a la estructura de handle del sensor MAX31856.
  * @retval true si la conversión está completa, false en caso contrario.
  */
bool MAX31856_ConversionComplete(Max31856_HandleTypeDef* hmax) {
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  if (hmax->conversionMode == MAX31856_CONTINUOUS)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	7a9b      	ldrb	r3, [r3, #10]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d101      	bne.n	80010ce <MAX31856_ConversionComplete+0x14>
    return true; // Siempre "completa" en modo continuo
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00b      	b.n	80010e6 <MAX31856_ConversionComplete+0x2c>

  // La conversión está completa cuando el bit MAX31856_CR0_1SHOT se borra automáticamente
  return !(readRegister8(hmax, MAX31856_CR0_REG) & MAX31856_CR0_1SHOT);
 80010ce:	2100      	movs	r1, #0
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff40 	bl	8000f56 <readRegister8>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010dc:	2b00      	cmp	r3, #0
 80010de:	bf0c      	ite	eq
 80010e0:	2301      	moveq	r3, #1
 80010e2:	2300      	movne	r3, #0
 80010e4:	b2db      	uxtb	r3, r3
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <MAX31856_ReadThermocoupleTemperature>:
/**
  * @brief  Lee la temperatura del termopar del sensor.
  * @param  hmax: Puntero a la estructura de handle del sensor MAX31856.
  * @retval La temperatura del termopar en grados Celsius, o NAN si hay timeout.
  */
float MAX31856_ReadThermocoupleTemperature(Max31856_HandleTypeDef* hmax) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  // Para el modo One-Shot, dispara una conversión y espera a que termine
  if (hmax->conversionMode == MAX31856_ONESHOT) {
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7a9b      	ldrb	r3, [r3, #10]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d11b      	bne.n	8001138 <MAX31856_ReadThermocoupleTemperature+0x48>
    MAX31856_TriggerOneShot(hmax);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ffb9 	bl	8001078 <MAX31856_TriggerOneShot>
    uint32_t start = HAL_GetTick();
 8001106:	f001 f839 	bl	800217c <HAL_GetTick>
 800110a:	60b8      	str	r0, [r7, #8]
    while (!MAX31856_ConversionComplete(hmax)) {
 800110c:	e00b      	b.n	8001126 <MAX31856_ReadThermocoupleTemperature+0x36>
      if (HAL_GetTick() - start > 250) // Timeout de 250ms
 800110e:	f001 f835 	bl	800217c <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2bfa      	cmp	r3, #250	@ 0xfa
 800111a:	d901      	bls.n	8001120 <MAX31856_ReadThermocoupleTemperature+0x30>
        return NAN; // Retorna Not-A-Number en caso de timeout
 800111c:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <MAX31856_ReadThermocoupleTemperature+0x9c>)
 800111e:	e02d      	b.n	800117c <MAX31856_ReadThermocoupleTemperature+0x8c>
      HAL_Delay(10); // Pequeño retraso para no saturar el bus
 8001120:	200a      	movs	r0, #10
 8001122:	f001 f837 	bl	8002194 <HAL_Delay>
    while (!MAX31856_ConversionComplete(hmax)) {
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffc7 	bl	80010ba <MAX31856_ConversionComplete>
 800112c:	4603      	mov	r3, r0
 800112e:	f083 0301 	eor.w	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1ea      	bne.n	800110e <MAX31856_ReadThermocoupleTemperature+0x1e>
    }
  }

  // Lee los registros de temperatura linealizada del termopar (3 bytes)
  int32_t temp24 = (int32_t)readRegister24(hmax, MAX31856_LTCBH_REG); // Castea a int32_t para manejo de signo
 8001138:	210c      	movs	r1, #12
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff1f 	bl	8000f7e <readRegister24>
 8001140:	4603      	mov	r3, r0
 8001142:	60fb      	str	r3, [r7, #12]

  // El bit 23 es el bit de signo (MSB de los 24 bits de datos).
  // Si está seteado, el número es negativo y necesitamos extender el signo a 32 bits.
  if (temp24 & 0x800000) {
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <MAX31856_ReadThermocoupleTemperature+0x66>
    temp24 |= 0xFF000000; // Extiende el signo para valores negativos
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001154:	60fb      	str	r3, [r7, #12]
  }

  // Los 5 bits menos significativos (bits 0-4) no se usan y deben ser descartados.
  temp24 >>= 5;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	115b      	asrs	r3, r3, #5
 800115a:	60fb      	str	r3, [r7, #12]

  // La resolución es de 0.0078125 °C/LSB (1/128).
  return temp24 * 0.0078125;
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f7ff fa01 	bl	8000564 <__aeabi_i2d>
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800116a:	f7ff fa65 	bl	8000638 <__aeabi_dmul>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff fc71 	bl	8000a5c <__aeabi_d2f>
 800117a:	4603      	mov	r3, r0
}
 800117c:	ee07 3a90 	vmov	s15, r3
 8001180:	eeb0 0a67 	vmov.f32	s0, s15
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	7fc00000 	.word	0x7fc00000

08001190 <app_main>:
// Puedes aumentar el buffer para estar seguro
#define TOTAL_MESSAGE_BUFFER_SIZE (64)


void app_main(void)
{
 8001190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001194:	b09a      	sub	sp, #104	@ 0x68
 8001196:	af06      	add	r7, sp, #24
    if (!MAX31856_Init(&mySensor1, &hspi2, SPI_CS1_GPIO_Port, SPI_CS1_Pin)) {
 8001198:	2340      	movs	r3, #64	@ 0x40
 800119a:	4a50      	ldr	r2, [pc, #320]	@ (80012dc <app_main+0x14c>)
 800119c:	4950      	ldr	r1, [pc, #320]	@ (80012e0 <app_main+0x150>)
 800119e:	4851      	ldr	r0, [pc, #324]	@ (80012e4 <app_main+0x154>)
 80011a0:	f7ff fe42 	bl	8000e28 <MAX31856_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	f083 0301 	eor.w	r3, r3, #1
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00a      	beq.n	80011c6 <app_main+0x36>
        HAL_UART_Transmit(&huart1, (uint8_t*)MSG_INIT_ERROR, strlen(MSG_INIT_ERROR), HAL_MAX_DELAY);
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	222a      	movs	r2, #42	@ 0x2a
 80011b6:	494c      	ldr	r1, [pc, #304]	@ (80012e8 <app_main+0x158>)
 80011b8:	484c      	ldr	r0, [pc, #304]	@ (80012ec <app_main+0x15c>)
 80011ba:	f003 faff 	bl	80047bc <HAL_UART_Transmit>
        while (1) HAL_Delay(10);
 80011be:	200a      	movs	r0, #10
 80011c0:	f000 ffe8 	bl	8002194 <HAL_Delay>
 80011c4:	e7fb      	b.n	80011be <app_main+0x2e>
    }
    if (!MAX31856_Init(&mySensor2, &hspi2, SPI_CS2_GPIO_Port, SPI_CS2_Pin)) {
 80011c6:	2380      	movs	r3, #128	@ 0x80
 80011c8:	4a44      	ldr	r2, [pc, #272]	@ (80012dc <app_main+0x14c>)
 80011ca:	4945      	ldr	r1, [pc, #276]	@ (80012e0 <app_main+0x150>)
 80011cc:	4848      	ldr	r0, [pc, #288]	@ (80012f0 <app_main+0x160>)
 80011ce:	f7ff fe2b 	bl	8000e28 <MAX31856_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f083 0301 	eor.w	r3, r3, #1
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00a      	beq.n	80011f4 <app_main+0x64>
        HAL_UART_Transmit(&huart1, (uint8_t*)MSG_INIT_ERROR, strlen(MSG_INIT_ERROR), HAL_MAX_DELAY);
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	222a      	movs	r2, #42	@ 0x2a
 80011e4:	4940      	ldr	r1, [pc, #256]	@ (80012e8 <app_main+0x158>)
 80011e6:	4841      	ldr	r0, [pc, #260]	@ (80012ec <app_main+0x15c>)
 80011e8:	f003 fae8 	bl	80047bc <HAL_UART_Transmit>
        while (1) HAL_Delay(10);
 80011ec:	200a      	movs	r0, #10
 80011ee:	f000 ffd1 	bl	8002194 <HAL_Delay>
 80011f2:	e7fb      	b.n	80011ec <app_main+0x5c>
    }
    if (!MAX31856_Init(&mySensor3, &hspi2, SPI_CS3_GPIO_Port, SPI_CS3_Pin)) {
 80011f4:	2304      	movs	r3, #4
 80011f6:	4a3f      	ldr	r2, [pc, #252]	@ (80012f4 <app_main+0x164>)
 80011f8:	4939      	ldr	r1, [pc, #228]	@ (80012e0 <app_main+0x150>)
 80011fa:	483f      	ldr	r0, [pc, #252]	@ (80012f8 <app_main+0x168>)
 80011fc:	f7ff fe14 	bl	8000e28 <MAX31856_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	f083 0301 	eor.w	r3, r3, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00a      	beq.n	8001222 <app_main+0x92>
        HAL_UART_Transmit(&huart1, (uint8_t*)MSG_INIT_ERROR, strlen(MSG_INIT_ERROR), HAL_MAX_DELAY);
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
 8001210:	222a      	movs	r2, #42	@ 0x2a
 8001212:	4935      	ldr	r1, [pc, #212]	@ (80012e8 <app_main+0x158>)
 8001214:	4835      	ldr	r0, [pc, #212]	@ (80012ec <app_main+0x15c>)
 8001216:	f003 fad1 	bl	80047bc <HAL_UART_Transmit>
        while (1) HAL_Delay(10);
 800121a:	200a      	movs	r0, #10
 800121c:	f000 ffba 	bl	8002194 <HAL_Delay>
 8001220:	e7fb      	b.n	800121a <app_main+0x8a>
    }

    if (!MAX31856_Init(&mySensor4, &hspi2, SPI_CS4_GPIO_Port, SPI_CS4_Pin)) {
 8001222:	2308      	movs	r3, #8
 8001224:	4a33      	ldr	r2, [pc, #204]	@ (80012f4 <app_main+0x164>)
 8001226:	492e      	ldr	r1, [pc, #184]	@ (80012e0 <app_main+0x150>)
 8001228:	4834      	ldr	r0, [pc, #208]	@ (80012fc <app_main+0x16c>)
 800122a:	f7ff fdfd 	bl	8000e28 <MAX31856_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	f083 0301 	eor.w	r3, r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00a      	beq.n	8001250 <app_main+0xc0>
            HAL_UART_Transmit(&huart1, (uint8_t*)MSG_INIT_ERROR, strlen(MSG_INIT_ERROR), HAL_MAX_DELAY);
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	222a      	movs	r2, #42	@ 0x2a
 8001240:	4929      	ldr	r1, [pc, #164]	@ (80012e8 <app_main+0x158>)
 8001242:	482a      	ldr	r0, [pc, #168]	@ (80012ec <app_main+0x15c>)
 8001244:	f003 faba 	bl	80047bc <HAL_UART_Transmit>
            while (1) HAL_Delay(10);
 8001248:	200a      	movs	r0, #10
 800124a:	f000 ffa3 	bl	8002194 <HAL_Delay>
 800124e:	e7fb      	b.n	8001248 <app_main+0xb8>
    }

    HAL_Delay(200);
 8001250:	20c8      	movs	r0, #200	@ 0xc8
 8001252:	f000 ff9f 	bl	8002194 <HAL_Delay>
    float temp1, temp2, temp3,temp4;
    char combined_buffer[TOTAL_MESSAGE_BUFFER_SIZE];

    while (1)
    {
        temp1 = MAX31856_ReadThermocoupleTemperature(&mySensor1);
 8001256:	4823      	ldr	r0, [pc, #140]	@ (80012e4 <app_main+0x154>)
 8001258:	f7ff ff4a 	bl	80010f0 <MAX31856_ReadThermocoupleTemperature>
 800125c:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
        temp2 = MAX31856_ReadThermocoupleTemperature(&mySensor2);
 8001260:	4823      	ldr	r0, [pc, #140]	@ (80012f0 <app_main+0x160>)
 8001262:	f7ff ff45 	bl	80010f0 <MAX31856_ReadThermocoupleTemperature>
 8001266:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
        temp3 = MAX31856_ReadThermocoupleTemperature(&mySensor3);
 800126a:	4823      	ldr	r0, [pc, #140]	@ (80012f8 <app_main+0x168>)
 800126c:	f7ff ff40 	bl	80010f0 <MAX31856_ReadThermocoupleTemperature>
 8001270:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
        temp4 = MAX31856_ReadThermocoupleTemperature(&mySensor4);
 8001274:	4821      	ldr	r0, [pc, #132]	@ (80012fc <app_main+0x16c>)
 8001276:	f7ff ff3b 	bl	80010f0 <MAX31856_ReadThermocoupleTemperature>
 800127a:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40

        sprintf(combined_buffer, MSG_THERMO_PREFIX, temp1, temp2, temp3,temp4);
 800127e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001280:	f7ff f982 	bl	8000588 <__aeabi_f2d>
 8001284:	4682      	mov	sl, r0
 8001286:	468b      	mov	fp, r1
 8001288:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800128a:	f7ff f97d 	bl	8000588 <__aeabi_f2d>
 800128e:	4604      	mov	r4, r0
 8001290:	460d      	mov	r5, r1
 8001292:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001294:	f7ff f978 	bl	8000588 <__aeabi_f2d>
 8001298:	4680      	mov	r8, r0
 800129a:	4689      	mov	r9, r1
 800129c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800129e:	f7ff f973 	bl	8000588 <__aeabi_f2d>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4638      	mov	r0, r7
 80012a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012ac:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80012b0:	e9cd 4500 	strd	r4, r5, [sp]
 80012b4:	4652      	mov	r2, sl
 80012b6:	465b      	mov	r3, fp
 80012b8:	4911      	ldr	r1, [pc, #68]	@ (8001300 <app_main+0x170>)
 80012ba:	f003 ff37 	bl	800512c <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)combined_buffer, strlen(combined_buffer), HAL_MAX_DELAY);
 80012be:	463b      	mov	r3, r7
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7fe ffa5 	bl	8000210 <strlen>
 80012c6:	4603      	mov	r3, r0
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	4639      	mov	r1, r7
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295
 80012d0:	4806      	ldr	r0, [pc, #24]	@ (80012ec <app_main+0x15c>)
 80012d2:	f003 fa73 	bl	80047bc <HAL_UART_Transmit>
        temp1 = MAX31856_ReadThermocoupleTemperature(&mySensor1);
 80012d6:	bf00      	nop
 80012d8:	e7bd      	b.n	8001256 <app_main+0xc6>
 80012da:	bf00      	nop
 80012dc:	40021800 	.word	0x40021800
 80012e0:	200000a8 	.word	0x200000a8
 80012e4:	20000078 	.word	0x20000078
 80012e8:	08005a84 	.word	0x08005a84
 80012ec:	2000010c 	.word	0x2000010c
 80012f0:	20000084 	.word	0x20000084
 80012f4:	40022000 	.word	0x40022000
 80012f8:	20000090 	.word	0x20000090
 80012fc:	2000009c 	.word	0x2000009c
 8001300:	08005ab0 	.word	0x08005ab0

08001304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001308:	f000 fee7 	bl	80020da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130c:	f000 f80a 	bl	8001324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001310:	f000 f8de 	bl	80014d0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001314:	f000 f86e 	bl	80013f4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001318:	f000 f8aa 	bl	8001470 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 800131c:	f7ff ff38 	bl	8001190 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <main+0x1c>

08001324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b094      	sub	sp, #80	@ 0x50
 8001328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132a:	f107 0320 	add.w	r3, r7, #32
 800132e:	2230      	movs	r2, #48	@ 0x30
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f003 ff1c 	bl	8005170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001348:	4b28      	ldr	r3, [pc, #160]	@ (80013ec <SystemClock_Config+0xc8>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134c:	4a27      	ldr	r2, [pc, #156]	@ (80013ec <SystemClock_Config+0xc8>)
 800134e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001352:	6413      	str	r3, [r2, #64]	@ 0x40
 8001354:	4b25      	ldr	r3, [pc, #148]	@ (80013ec <SystemClock_Config+0xc8>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001360:	4b23      	ldr	r3, [pc, #140]	@ (80013f0 <SystemClock_Config+0xcc>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001368:	4a21      	ldr	r2, [pc, #132]	@ (80013f0 <SystemClock_Config+0xcc>)
 800136a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b1f      	ldr	r3, [pc, #124]	@ (80013f0 <SystemClock_Config+0xcc>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800137c:	2302      	movs	r3, #2
 800137e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001380:	2301      	movs	r3, #1
 8001382:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001384:	2310      	movs	r3, #16
 8001386:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001388:	2302      	movs	r3, #2
 800138a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800138c:	2300      	movs	r3, #0
 800138e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8001390:	230a      	movs	r3, #10
 8001392:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8001394:	23d2      	movs	r3, #210	@ 0xd2
 8001396:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001398:	2302      	movs	r3, #2
 800139a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800139c:	2302      	movs	r3, #2
 800139e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a0:	f107 0320 	add.w	r3, r7, #32
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 f9c5 	bl	8002734 <HAL_RCC_OscConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80013b0:	f000 fce4 	bl	8001d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b4:	230f      	movs	r3, #15
 80013b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b8:	2302      	movs	r3, #2
 80013ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80013bc:	2380      	movs	r3, #128	@ 0x80
 80013be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	2102      	movs	r1, #2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f001 fc52 	bl	8002c7c <HAL_RCC_ClockConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80013de:	f000 fccd 	bl	8001d7c <Error_Handler>
  }
}
 80013e2:	bf00      	nop
 80013e4:	3750      	adds	r7, #80	@ 0x50
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40007000 	.word	0x40007000

080013f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001468 <MX_SPI2_Init+0x74>)
 80013fa:	4a1c      	ldr	r2, [pc, #112]	@ (800146c <MX_SPI2_Init+0x78>)
 80013fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <MX_SPI2_Init+0x74>)
 8001400:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001404:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001406:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <MX_SPI2_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800140c:	4b16      	ldr	r3, [pc, #88]	@ (8001468 <MX_SPI2_Init+0x74>)
 800140e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001412:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001414:	4b14      	ldr	r3, [pc, #80]	@ (8001468 <MX_SPI2_Init+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800141a:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <MX_SPI2_Init+0x74>)
 800141c:	2201      	movs	r2, #1
 800141e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001420:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <MX_SPI2_Init+0x74>)
 8001422:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001426:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001428:	4b0f      	ldr	r3, [pc, #60]	@ (8001468 <MX_SPI2_Init+0x74>)
 800142a:	2210      	movs	r2, #16
 800142c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800142e:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <MX_SPI2_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001434:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <MX_SPI2_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800143a:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <MX_SPI2_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001440:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <MX_SPI2_Init+0x74>)
 8001442:	2207      	movs	r2, #7
 8001444:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001446:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <MX_SPI2_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800144c:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <MX_SPI2_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001452:	4805      	ldr	r0, [pc, #20]	@ (8001468 <MX_SPI2_Init+0x74>)
 8001454:	f002 f9e8 	bl	8003828 <HAL_SPI_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800145e:	f000 fc8d 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200000a8 	.word	0x200000a8
 800146c:	40003800 	.word	0x40003800

08001470 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001474:	4b14      	ldr	r3, [pc, #80]	@ (80014c8 <MX_USART1_UART_Init+0x58>)
 8001476:	4a15      	ldr	r2, [pc, #84]	@ (80014cc <MX_USART1_UART_Init+0x5c>)
 8001478:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800147a:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <MX_USART1_UART_Init+0x58>)
 800147c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001480:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <MX_USART1_UART_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <MX_USART1_UART_Init+0x58>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800148e:	4b0e      	ldr	r3, [pc, #56]	@ (80014c8 <MX_USART1_UART_Init+0x58>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b0c      	ldr	r3, [pc, #48]	@ (80014c8 <MX_USART1_UART_Init+0x58>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <MX_USART1_UART_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <MX_USART1_UART_Init+0x58>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a6:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <MX_USART1_UART_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <MX_USART1_UART_Init+0x58>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014b2:	4805      	ldr	r0, [pc, #20]	@ (80014c8 <MX_USART1_UART_Init+0x58>)
 80014b4:	f003 f934 	bl	8004720 <HAL_UART_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014be:	f000 fc5d 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000010c 	.word	0x2000010c
 80014cc:	40011000 	.word	0x40011000

080014d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b090      	sub	sp, #64	@ 0x40
 80014d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014e6:	4bad      	ldr	r3, [pc, #692]	@ (800179c <MX_GPIO_Init+0x2cc>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4aac      	ldr	r2, [pc, #688]	@ (800179c <MX_GPIO_Init+0x2cc>)
 80014ec:	f043 0310 	orr.w	r3, r3, #16
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4baa      	ldr	r3, [pc, #680]	@ (800179c <MX_GPIO_Init+0x2cc>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0310 	and.w	r3, r3, #16
 80014fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014fe:	4ba7      	ldr	r3, [pc, #668]	@ (800179c <MX_GPIO_Init+0x2cc>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4aa6      	ldr	r2, [pc, #664]	@ (800179c <MX_GPIO_Init+0x2cc>)
 8001504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4ba4      	ldr	r3, [pc, #656]	@ (800179c <MX_GPIO_Init+0x2cc>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
 8001514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	4ba1      	ldr	r3, [pc, #644]	@ (800179c <MX_GPIO_Init+0x2cc>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4aa0      	ldr	r2, [pc, #640]	@ (800179c <MX_GPIO_Init+0x2cc>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b9e      	ldr	r3, [pc, #632]	@ (800179c <MX_GPIO_Init+0x2cc>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	623b      	str	r3, [r7, #32]
 800152c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800152e:	4b9b      	ldr	r3, [pc, #620]	@ (800179c <MX_GPIO_Init+0x2cc>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	4a9a      	ldr	r2, [pc, #616]	@ (800179c <MX_GPIO_Init+0x2cc>)
 8001534:	f043 0308 	orr.w	r3, r3, #8
 8001538:	6313      	str	r3, [r2, #48]	@ 0x30
 800153a:	4b98      	ldr	r3, [pc, #608]	@ (800179c <MX_GPIO_Init+0x2cc>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	61fb      	str	r3, [r7, #28]
 8001544:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	4b95      	ldr	r3, [pc, #596]	@ (800179c <MX_GPIO_Init+0x2cc>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a94      	ldr	r2, [pc, #592]	@ (800179c <MX_GPIO_Init+0x2cc>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b92      	ldr	r3, [pc, #584]	@ (800179c <MX_GPIO_Init+0x2cc>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	61bb      	str	r3, [r7, #24]
 800155c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	4b8f      	ldr	r3, [pc, #572]	@ (800179c <MX_GPIO_Init+0x2cc>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a8e      	ldr	r2, [pc, #568]	@ (800179c <MX_GPIO_Init+0x2cc>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b8c      	ldr	r3, [pc, #560]	@ (800179c <MX_GPIO_Init+0x2cc>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001576:	4b89      	ldr	r3, [pc, #548]	@ (800179c <MX_GPIO_Init+0x2cc>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	4a88      	ldr	r2, [pc, #544]	@ (800179c <MX_GPIO_Init+0x2cc>)
 800157c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001580:	6313      	str	r3, [r2, #48]	@ 0x30
 8001582:	4b86      	ldr	r3, [pc, #536]	@ (800179c <MX_GPIO_Init+0x2cc>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800158e:	4b83      	ldr	r3, [pc, #524]	@ (800179c <MX_GPIO_Init+0x2cc>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a82      	ldr	r2, [pc, #520]	@ (800179c <MX_GPIO_Init+0x2cc>)
 8001594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b80      	ldr	r3, [pc, #512]	@ (800179c <MX_GPIO_Init+0x2cc>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80015a6:	4b7d      	ldr	r3, [pc, #500]	@ (800179c <MX_GPIO_Init+0x2cc>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4a7c      	ldr	r2, [pc, #496]	@ (800179c <MX_GPIO_Init+0x2cc>)
 80015ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b2:	4b7a      	ldr	r3, [pc, #488]	@ (800179c <MX_GPIO_Init+0x2cc>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015be:	4b77      	ldr	r3, [pc, #476]	@ (800179c <MX_GPIO_Init+0x2cc>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	4a76      	ldr	r2, [pc, #472]	@ (800179c <MX_GPIO_Init+0x2cc>)
 80015c4:	f043 0320 	orr.w	r3, r3, #32
 80015c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ca:	4b74      	ldr	r3, [pc, #464]	@ (800179c <MX_GPIO_Init+0x2cc>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	f003 0320 	and.w	r3, r3, #32
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015d6:	4b71      	ldr	r3, [pc, #452]	@ (800179c <MX_GPIO_Init+0x2cc>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a70      	ldr	r2, [pc, #448]	@ (800179c <MX_GPIO_Init+0x2cc>)
 80015dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b6e      	ldr	r3, [pc, #440]	@ (800179c <MX_GPIO_Init+0x2cc>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80015ee:	2201      	movs	r2, #1
 80015f0:	2120      	movs	r1, #32
 80015f2:	486b      	ldr	r0, [pc, #428]	@ (80017a0 <MX_GPIO_Init+0x2d0>)
 80015f4:	f001 f884 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, SPI_CS4_Pin|SPI_CS3_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	f241 010c 	movw	r1, #4108	@ 0x100c
 80015fe:	4869      	ldr	r0, [pc, #420]	@ (80017a4 <MX_GPIO_Init+0x2d4>)
 8001600:	f001 f87e 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	2108      	movs	r1, #8
 8001608:	4867      	ldr	r0, [pc, #412]	@ (80017a8 <MX_GPIO_Init+0x2d8>)
 800160a:	f001 f879 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001614:	4865      	ldr	r0, [pc, #404]	@ (80017ac <MX_GPIO_Init+0x2dc>)
 8001616:	f001 f873 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SPI_CS2_Pin|SPI_CS1_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	21c8      	movs	r1, #200	@ 0xc8
 800161e:	4864      	ldr	r0, [pc, #400]	@ (80017b0 <MX_GPIO_Init+0x2e0>)
 8001620:	f001 f86e 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001624:	2310      	movs	r3, #16
 8001626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001634:	230e      	movs	r3, #14
 8001636:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800163c:	4619      	mov	r1, r3
 800163e:	485d      	ldr	r0, [pc, #372]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 8001640:	f000 feb2 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001644:	2308      	movs	r3, #8
 8001646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001648:	2300      	movs	r3, #0
 800164a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001654:	4619      	mov	r1, r3
 8001656:	4857      	ldr	r0, [pc, #348]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 8001658:	f000 fea6 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800165c:	2304      	movs	r3, #4
 800165e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800166c:	2309      	movs	r3, #9
 800166e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001674:	4619      	mov	r1, r3
 8001676:	484f      	ldr	r0, [pc, #316]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 8001678:	f000 fe96 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800167c:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001680:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	2303      	movs	r3, #3
 800168c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800168e:	230b      	movs	r3, #11
 8001690:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001692:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001696:	4619      	mov	r1, r3
 8001698:	4845      	ldr	r0, [pc, #276]	@ (80017b0 <MX_GPIO_Init+0x2e0>)
 800169a:	f000 fe85 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800169e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80016a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016b0:	230c      	movs	r3, #12
 80016b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016b8:	4619      	mov	r1, r3
 80016ba:	483e      	ldr	r0, [pc, #248]	@ (80017b4 <MX_GPIO_Init+0x2e4>)
 80016bc:	f000 fe74 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80016c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c6:	2312      	movs	r3, #18
 80016c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016d2:	2304      	movs	r3, #4
 80016d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016da:	4619      	mov	r1, r3
 80016dc:	4836      	ldr	r0, [pc, #216]	@ (80017b8 <MX_GPIO_Init+0x2e8>)
 80016de:	f000 fe63 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80016e2:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80016e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80016f4:	230a      	movs	r3, #10
 80016f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016fc:	4619      	mov	r1, r3
 80016fe:	482e      	ldr	r0, [pc, #184]	@ (80017b8 <MX_GPIO_Init+0x2e8>)
 8001700:	f000 fe52 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001704:	2310      	movs	r3, #16
 8001706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001714:	2302      	movs	r3, #2
 8001716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800171c:	4619      	mov	r1, r3
 800171e:	4826      	ldr	r0, [pc, #152]	@ (80017b8 <MX_GPIO_Init+0x2e8>)
 8001720:	f000 fe42 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001724:	2380      	movs	r3, #128	@ 0x80
 8001726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001734:	2308      	movs	r3, #8
 8001736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001738:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800173c:	4619      	mov	r1, r3
 800173e:	4818      	ldr	r0, [pc, #96]	@ (80017a0 <MX_GPIO_Init+0x2d0>)
 8001740:	f000 fe32 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001744:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001748:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001756:	230c      	movs	r3, #12
 8001758:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800175e:	4619      	mov	r1, r3
 8001760:	4816      	ldr	r0, [pc, #88]	@ (80017bc <MX_GPIO_Init+0x2ec>)
 8001762:	f000 fe21 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800176a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001778:	2301      	movs	r3, #1
 800177a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800177c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001780:	4619      	mov	r1, r3
 8001782:	480f      	ldr	r0, [pc, #60]	@ (80017c0 <MX_GPIO_Init+0x2f0>)
 8001784:	f000 fe10 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001788:	2360      	movs	r3, #96	@ 0x60
 800178a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001798:	230d      	movs	r3, #13
 800179a:	e013      	b.n	80017c4 <MX_GPIO_Init+0x2f4>
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020c00 	.word	0x40020c00
 80017a4:	40022000 	.word	0x40022000
 80017a8:	40022800 	.word	0x40022800
 80017ac:	40021c00 	.word	0x40021c00
 80017b0:	40021800 	.word	0x40021800
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40020400 	.word	0x40020400
 80017bc:	40020800 	.word	0x40020800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017ca:	4619      	mov	r1, r3
 80017cc:	48bc      	ldr	r0, [pc, #752]	@ (8001ac0 <MX_GPIO_Init+0x5f0>)
 80017ce:	f000 fdeb 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80017d2:	2340      	movs	r3, #64	@ 0x40
 80017d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80017e2:	230a      	movs	r3, #10
 80017e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80017e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017ea:	4619      	mov	r1, r3
 80017ec:	48b5      	ldr	r0, [pc, #724]	@ (8001ac4 <MX_GPIO_Init+0x5f4>)
 80017ee:	f000 fddb 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80017f2:	f248 1333 	movw	r3, #33075	@ 0x8133
 80017f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001800:	2303      	movs	r3, #3
 8001802:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001804:	230c      	movs	r3, #12
 8001806:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001808:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800180c:	4619      	mov	r1, r3
 800180e:	48ae      	ldr	r0, [pc, #696]	@ (8001ac8 <MX_GPIO_Init+0x5f8>)
 8001810:	f000 fdca 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001814:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001818:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001826:	230e      	movs	r3, #14
 8001828:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800182a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800182e:	4619      	mov	r1, r3
 8001830:	48a6      	ldr	r0, [pc, #664]	@ (8001acc <MX_GPIO_Init+0x5fc>)
 8001832:	f000 fdb9 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001836:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800183a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183c:	2300      	movs	r3, #0
 800183e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001844:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001848:	4619      	mov	r1, r3
 800184a:	48a0      	ldr	r0, [pc, #640]	@ (8001acc <MX_GPIO_Init+0x5fc>)
 800184c:	f000 fdac 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001850:	2340      	movs	r3, #64	@ 0x40
 8001852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001854:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001858:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800185e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001862:	4619      	mov	r1, r3
 8001864:	489a      	ldr	r0, [pc, #616]	@ (8001ad0 <MX_GPIO_Init+0x600>)
 8001866:	f000 fd9f 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800186a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800186e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800187c:	230c      	movs	r3, #12
 800187e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001880:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001884:	4619      	mov	r1, r3
 8001886:	4892      	ldr	r0, [pc, #584]	@ (8001ad0 <MX_GPIO_Init+0x600>)
 8001888:	f000 fd8e 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800188c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800189e:	230a      	movs	r3, #10
 80018a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018a6:	4619      	mov	r1, r3
 80018a8:	488a      	ldr	r0, [pc, #552]	@ (8001ad4 <MX_GPIO_Init+0x604>)
 80018aa:	f000 fd7d 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80018ae:	23f0      	movs	r3, #240	@ 0xf0
 80018b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80018be:	230a      	movs	r3, #10
 80018c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018c6:	4619      	mov	r1, r3
 80018c8:	4883      	ldr	r0, [pc, #524]	@ (8001ad8 <MX_GPIO_Init+0x608>)
 80018ca:	f000 fd6d 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80018ce:	23f7      	movs	r3, #247	@ 0xf7
 80018d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018de:	230e      	movs	r3, #14
 80018e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80018e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018e6:	4619      	mov	r1, r3
 80018e8:	487c      	ldr	r0, [pc, #496]	@ (8001adc <MX_GPIO_Init+0x60c>)
 80018ea:	f000 fd5d 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80018ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001900:	2309      	movs	r3, #9
 8001902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001908:	4619      	mov	r1, r3
 800190a:	486f      	ldr	r0, [pc, #444]	@ (8001ac8 <MX_GPIO_Init+0x5f8>)
 800190c:	f000 fd4c 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001910:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001922:	230a      	movs	r3, #10
 8001924:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001926:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800192a:	4619      	mov	r1, r3
 800192c:	4866      	ldr	r0, [pc, #408]	@ (8001ac8 <MX_GPIO_Init+0x5f8>)
 800192e:	f000 fd3b 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001932:	2320      	movs	r3, #32
 8001934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001936:	2301      	movs	r3, #1
 8001938:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001942:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001946:	4619      	mov	r1, r3
 8001948:	4861      	ldr	r0, [pc, #388]	@ (8001ad0 <MX_GPIO_Init+0x600>)
 800194a:	f000 fd2d 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800194e:	2308      	movs	r3, #8
 8001950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800195e:	230d      	movs	r3, #13
 8001960:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001962:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001966:	4619      	mov	r1, r3
 8001968:	4859      	ldr	r0, [pc, #356]	@ (8001ad0 <MX_GPIO_Init+0x600>)
 800196a:	f000 fd1d 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS4_Pin SPI_CS3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = SPI_CS4_Pin|SPI_CS3_Pin|LCD_DISP_Pin;
 800196e:	f241 030c 	movw	r3, #4108	@ 0x100c
 8001972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001980:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001984:	4619      	mov	r1, r3
 8001986:	4854      	ldr	r0, [pc, #336]	@ (8001ad8 <MX_GPIO_Init+0x608>)
 8001988:	f000 fd0e 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800198c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001990:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001992:	2300      	movs	r3, #0
 8001994:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800199a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800199e:	4619      	mov	r1, r3
 80019a0:	484f      	ldr	r0, [pc, #316]	@ (8001ae0 <MX_GPIO_Init+0x610>)
 80019a2:	f000 fd01 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80019a6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80019aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019b8:	230c      	movs	r3, #12
 80019ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019c0:	4619      	mov	r1, r3
 80019c2:	4848      	ldr	r0, [pc, #288]	@ (8001ae4 <MX_GPIO_Init+0x614>)
 80019c4:	f000 fcf0 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80019c8:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80019cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019da:	230e      	movs	r3, #14
 80019dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019e2:	4619      	mov	r1, r3
 80019e4:	483c      	ldr	r0, [pc, #240]	@ (8001ad8 <MX_GPIO_Init+0x608>)
 80019e6:	f000 fcdf 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80019ea:	2308      	movs	r3, #8
 80019ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019fe:	4619      	mov	r1, r3
 8001a00:	4836      	ldr	r0, [pc, #216]	@ (8001adc <MX_GPIO_Init+0x60c>)
 8001a02:	f000 fcd1 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001a06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a18:	230d      	movs	r3, #13
 8001a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a20:	4619      	mov	r1, r3
 8001a22:	4829      	ldr	r0, [pc, #164]	@ (8001ac8 <MX_GPIO_Init+0x5f8>)
 8001a24:	f000 fcc0 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a28:	2310      	movs	r3, #16
 8001a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4825      	ldr	r0, [pc, #148]	@ (8001ad0 <MX_GPIO_Init+0x600>)
 8001a3c:	f000 fcb4 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8001a40:	2304      	movs	r3, #4
 8001a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a50:	230c      	movs	r3, #12
 8001a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8001a54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a58:	4619      	mov	r1, r3
 8001a5a:	481d      	ldr	r0, [pc, #116]	@ (8001ad0 <MX_GPIO_Init+0x600>)
 8001a5c:	f000 fca4 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001a60:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a66:	2300      	movs	r3, #0
 8001a68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a72:	4619      	mov	r1, r3
 8001a74:	481c      	ldr	r0, [pc, #112]	@ (8001ae8 <MX_GPIO_Init+0x618>)
 8001a76:	f000 fc97 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001a7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a80:	2301      	movs	r3, #1
 8001a82:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a90:	4619      	mov	r1, r3
 8001a92:	4815      	ldr	r0, [pc, #84]	@ (8001ae8 <MX_GPIO_Init+0x618>)
 8001a94:	f000 fc88 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001a98:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8001a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001aaa:	230d      	movs	r3, #13
 8001aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001aae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480c      	ldr	r0, [pc, #48]	@ (8001ae8 <MX_GPIO_Init+0x618>)
 8001ab6:	f000 fc77 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e016      	b.n	8001aec <MX_GPIO_Init+0x61c>
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40020400 	.word	0x40020400
 8001ac8:	40021800 	.word	0x40021800
 8001acc:	40022400 	.word	0x40022400
 8001ad0:	40020c00 	.word	0x40020c00
 8001ad4:	40020000 	.word	0x40020000
 8001ad8:	40022000 	.word	0x40022000
 8001adc:	40022800 	.word	0x40022800
 8001ae0:	40020800 	.word	0x40020800
 8001ae4:	40021400 	.word	0x40021400
 8001ae8:	40021c00 	.word	0x40021c00
 8001aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001afa:	2302      	movs	r3, #2
 8001afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001afe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b02:	4619      	mov	r1, r3
 8001b04:	4895      	ldr	r0, [pc, #596]	@ (8001d5c <MX_GPIO_Init+0x88c>)
 8001b06:	f000 fc4f 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001b0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	2302      	movs	r3, #2
 8001b12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001b20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b24:	4619      	mov	r1, r3
 8001b26:	488e      	ldr	r0, [pc, #568]	@ (8001d60 <MX_GPIO_Init+0x890>)
 8001b28:	f000 fc3e 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001b2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b32:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001b36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001b3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b40:	4619      	mov	r1, r3
 8001b42:	4886      	ldr	r0, [pc, #536]	@ (8001d5c <MX_GPIO_Init+0x88c>)
 8001b44:	f000 fc30 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001b48:	23c0      	movs	r3, #192	@ 0xc0
 8001b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b54:	2303      	movs	r3, #3
 8001b56:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b58:	2308      	movs	r3, #8
 8001b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b60:	4619      	mov	r1, r3
 8001b62:	4880      	ldr	r0, [pc, #512]	@ (8001d64 <MX_GPIO_Init+0x894>)
 8001b64:	f000 fc20 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001b68:	2310      	movs	r3, #16
 8001b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b78:	230a      	movs	r3, #10
 8001b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001b7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b80:	4619      	mov	r1, r3
 8001b82:	4879      	ldr	r0, [pc, #484]	@ (8001d68 <MX_GPIO_Init+0x898>)
 8001b84:	f000 fc10 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001b88:	2328      	movs	r3, #40	@ 0x28
 8001b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b94:	2303      	movs	r3, #3
 8001b96:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b98:	230c      	movs	r3, #12
 8001b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4871      	ldr	r0, [pc, #452]	@ (8001d68 <MX_GPIO_Init+0x898>)
 8001ba4:	f000 fc00 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS2_Pin SPI_CS1_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = SPI_CS2_Pin|SPI_CS1_Pin|EXT_RST_Pin;
 8001ba8:	23c8      	movs	r3, #200	@ 0xc8
 8001baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bac:	2301      	movs	r3, #1
 8001bae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	486b      	ldr	r0, [pc, #428]	@ (8001d6c <MX_GPIO_Init+0x89c>)
 8001bc0:	f000 fbf2 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001bc4:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8001bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4865      	ldr	r0, [pc, #404]	@ (8001d70 <MX_GPIO_Init+0x8a0>)
 8001bda:	f000 fbe5 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001bde:	2308      	movs	r3, #8
 8001be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bea:	2303      	movs	r3, #3
 8001bec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bee:	230c      	movs	r3, #12
 8001bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001bf2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	485a      	ldr	r0, [pc, #360]	@ (8001d64 <MX_GPIO_Init+0x894>)
 8001bfa:	f000 fbd5 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001bfe:	2305      	movs	r3, #5
 8001c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c0e:	230a      	movs	r3, #10
 8001c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c16:	4619      	mov	r1, r3
 8001c18:	4852      	ldr	r0, [pc, #328]	@ (8001d64 <MX_GPIO_Init+0x894>)
 8001c1a:	f000 fbc5 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001c1e:	2332      	movs	r3, #50	@ 0x32
 8001c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c2e:	230b      	movs	r3, #11
 8001c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c36:	4619      	mov	r1, r3
 8001c38:	484a      	ldr	r0, [pc, #296]	@ (8001d64 <MX_GPIO_Init+0x894>)
 8001c3a:	f000 fbb5 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c3e:	2304      	movs	r3, #4
 8001c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c4e:	2309      	movs	r3, #9
 8001c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c56:	4619      	mov	r1, r3
 8001c58:	4846      	ldr	r0, [pc, #280]	@ (8001d74 <MX_GPIO_Init+0x8a4>)
 8001c5a:	f000 fba5 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001c5e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c70:	2309      	movs	r3, #9
 8001c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c78:	4619      	mov	r1, r3
 8001c7a:	483f      	ldr	r0, [pc, #252]	@ (8001d78 <MX_GPIO_Init+0x8a8>)
 8001c7c:	f000 fb94 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001c80:	2304      	movs	r3, #4
 8001c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c84:	2300      	movs	r3, #0
 8001c86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001c8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c90:	4619      	mov	r1, r3
 8001c92:	4836      	ldr	r0, [pc, #216]	@ (8001d6c <MX_GPIO_Init+0x89c>)
 8001c94:	f000 fb88 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001c98:	2386      	movs	r3, #134	@ 0x86
 8001c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ca8:	230b      	movs	r3, #11
 8001caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	482b      	ldr	r0, [pc, #172]	@ (8001d60 <MX_GPIO_Init+0x890>)
 8001cb4:	f000 fb78 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001cc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4825      	ldr	r0, [pc, #148]	@ (8001d60 <MX_GPIO_Init+0x890>)
 8001ccc:	f000 fb6c 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001cd0:	2350      	movs	r3, #80	@ 0x50
 8001cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ce0:	230d      	movs	r3, #13
 8001ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ce8:	4619      	mov	r1, r3
 8001cea:	481d      	ldr	r0, [pc, #116]	@ (8001d60 <MX_GPIO_Init+0x890>)
 8001cec:	f000 fb5c 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001cf0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf6:	2312      	movs	r3, #18
 8001cf8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d02:	2304      	movs	r3, #4
 8001d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4816      	ldr	r0, [pc, #88]	@ (8001d68 <MX_GPIO_Init+0x898>)
 8001d0e:	f000 fb4b 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001d12:	2328      	movs	r3, #40	@ 0x28
 8001d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d22:	230a      	movs	r3, #10
 8001d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	480c      	ldr	r0, [pc, #48]	@ (8001d60 <MX_GPIO_Init+0x890>)
 8001d2e:	f000 fb3b 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001d32:	2340      	movs	r3, #64	@ 0x40
 8001d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001d42:	2309      	movs	r3, #9
 8001d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001d46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4806      	ldr	r0, [pc, #24]	@ (8001d68 <MX_GPIO_Init+0x898>)
 8001d4e:	f000 fb2b 	bl	80023a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d52:	bf00      	nop
 8001d54:	3740      	adds	r7, #64	@ 0x40
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40022000 	.word	0x40022000
 8001d60:	40020000 	.word	0x40020000
 8001d64:	40020800 	.word	0x40020800
 8001d68:	40021c00 	.word	0x40021c00
 8001d6c:	40021800 	.word	0x40021800
 8001d70:	40021400 	.word	0x40021400
 8001d74:	40020400 	.word	0x40020400
 8001d78:	40020c00 	.word	0x40020c00

08001d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d80:	b672      	cpsid	i
}
 8001d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <Error_Handler+0x8>

08001d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dcc <HAL_MspInit+0x44>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	4a0e      	ldr	r2, [pc, #56]	@ (8001dcc <HAL_MspInit+0x44>)
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <HAL_MspInit+0x44>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da2:	607b      	str	r3, [r7, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da6:	4b09      	ldr	r3, [pc, #36]	@ (8001dcc <HAL_MspInit+0x44>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001daa:	4a08      	ldr	r2, [pc, #32]	@ (8001dcc <HAL_MspInit+0x44>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001db2:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <HAL_MspInit+0x44>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dba:	603b      	str	r3, [r7, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800

08001dd0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	@ 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a25      	ldr	r2, [pc, #148]	@ (8001e84 <HAL_SPI_MspInit+0xb4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d144      	bne.n	8001e7c <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001df2:	4b25      	ldr	r3, [pc, #148]	@ (8001e88 <HAL_SPI_MspInit+0xb8>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df6:	4a24      	ldr	r2, [pc, #144]	@ (8001e88 <HAL_SPI_MspInit+0xb8>)
 8001df8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dfe:	4b22      	ldr	r3, [pc, #136]	@ (8001e88 <HAL_SPI_MspInit+0xb8>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e88 <HAL_SPI_MspInit+0xb8>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001e88 <HAL_SPI_MspInit+0xb8>)
 8001e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e16:	4b1c      	ldr	r3, [pc, #112]	@ (8001e88 <HAL_SPI_MspInit+0xb8>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e22:	4b19      	ldr	r3, [pc, #100]	@ (8001e88 <HAL_SPI_MspInit+0xb8>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	4a18      	ldr	r2, [pc, #96]	@ (8001e88 <HAL_SPI_MspInit+0xb8>)
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2e:	4b16      	ldr	r3, [pc, #88]	@ (8001e88 <HAL_SPI_MspInit+0xb8>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e4a:	2305      	movs	r3, #5
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	4619      	mov	r1, r3
 8001e54:	480d      	ldr	r0, [pc, #52]	@ (8001e8c <HAL_SPI_MspInit+0xbc>)
 8001e56:	f000 faa7 	bl	80023a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001e5a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e6c:	2305      	movs	r3, #5
 8001e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	4806      	ldr	r0, [pc, #24]	@ (8001e90 <HAL_SPI_MspInit+0xc0>)
 8001e78:	f000 fa96 	bl	80023a8 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001e7c:	bf00      	nop
 8001e7e:	3728      	adds	r7, #40	@ 0x28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40003800 	.word	0x40003800
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40022000 	.word	0x40022000
 8001e90:	40020400 	.word	0x40020400

08001e94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b0ac      	sub	sp, #176	@ 0xb0
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eac:	f107 0318 	add.w	r3, r7, #24
 8001eb0:	2284      	movs	r2, #132	@ 0x84
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f003 f95b 	bl	8005170 <memset>
  if(huart->Instance==USART1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a32      	ldr	r2, [pc, #200]	@ (8001f88 <HAL_UART_MspInit+0xf4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d15c      	bne.n	8001f7e <HAL_UART_MspInit+0xea>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ec4:	2340      	movs	r3, #64	@ 0x40
 8001ec6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ecc:	f107 0318 	add.w	r3, r7, #24
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f001 f8b9 	bl	8003048 <HAL_RCCEx_PeriphCLKConfig>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001edc:	f7ff ff4e 	bl	8001d7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f8c <HAL_UART_MspInit+0xf8>)
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee4:	4a29      	ldr	r2, [pc, #164]	@ (8001f8c <HAL_UART_MspInit+0xf8>)
 8001ee6:	f043 0310 	orr.w	r3, r3, #16
 8001eea:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eec:	4b27      	ldr	r3, [pc, #156]	@ (8001f8c <HAL_UART_MspInit+0xf8>)
 8001eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef8:	4b24      	ldr	r3, [pc, #144]	@ (8001f8c <HAL_UART_MspInit+0xf8>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efc:	4a23      	ldr	r2, [pc, #140]	@ (8001f8c <HAL_UART_MspInit+0xf8>)
 8001efe:	f043 0302 	orr.w	r3, r3, #2
 8001f02:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f04:	4b21      	ldr	r3, [pc, #132]	@ (8001f8c <HAL_UART_MspInit+0xf8>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f10:	4b1e      	ldr	r3, [pc, #120]	@ (8001f8c <HAL_UART_MspInit+0xf8>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f14:	4a1d      	ldr	r2, [pc, #116]	@ (8001f8c <HAL_UART_MspInit+0xf8>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f8c <HAL_UART_MspInit+0xf8>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001f28:	2380      	movs	r3, #128	@ 0x80
 8001f2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f40:	2307      	movs	r3, #7
 8001f42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001f46:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4810      	ldr	r0, [pc, #64]	@ (8001f90 <HAL_UART_MspInit+0xfc>)
 8001f4e:	f000 fa2b 	bl	80023a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001f52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f6c:	2307      	movs	r3, #7
 8001f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001f72:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f76:	4619      	mov	r1, r3
 8001f78:	4806      	ldr	r0, [pc, #24]	@ (8001f94 <HAL_UART_MspInit+0x100>)
 8001f7a:	f000 fa15 	bl	80023a8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001f7e:	bf00      	nop
 8001f80:	37b0      	adds	r7, #176	@ 0xb0
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40011000 	.word	0x40011000
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020400 	.word	0x40020400
 8001f94:	40020000 	.word	0x40020000

08001f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f9c:	bf00      	nop
 8001f9e:	e7fd      	b.n	8001f9c <NMI_Handler+0x4>

08001fa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <HardFault_Handler+0x4>

08001fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <MemManage_Handler+0x4>

08001fb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <BusFault_Handler+0x4>

08001fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <UsageFault_Handler+0x4>

08001fc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fee:	f000 f8b1 	bl	8002154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002000:	4a14      	ldr	r2, [pc, #80]	@ (8002054 <_sbrk+0x5c>)
 8002002:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <_sbrk+0x60>)
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800200c:	4b13      	ldr	r3, [pc, #76]	@ (800205c <_sbrk+0x64>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002014:	4b11      	ldr	r3, [pc, #68]	@ (800205c <_sbrk+0x64>)
 8002016:	4a12      	ldr	r2, [pc, #72]	@ (8002060 <_sbrk+0x68>)
 8002018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201a:	4b10      	ldr	r3, [pc, #64]	@ (800205c <_sbrk+0x64>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	429a      	cmp	r2, r3
 8002026:	d207      	bcs.n	8002038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002028:	f003 f8aa 	bl	8005180 <__errno>
 800202c:	4603      	mov	r3, r0
 800202e:	220c      	movs	r2, #12
 8002030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
 8002036:	e009      	b.n	800204c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002038:	4b08      	ldr	r3, [pc, #32]	@ (800205c <_sbrk+0x64>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800203e:	4b07      	ldr	r3, [pc, #28]	@ (800205c <_sbrk+0x64>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	4a05      	ldr	r2, [pc, #20]	@ (800205c <_sbrk+0x64>)
 8002048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204a:	68fb      	ldr	r3, [r7, #12]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20050000 	.word	0x20050000
 8002058:	00000400 	.word	0x00000400
 800205c:	20000194 	.word	0x20000194
 8002060:	200002e8 	.word	0x200002e8

08002064 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002068:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <SystemInit+0x20>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206e:	4a05      	ldr	r2, [pc, #20]	@ (8002084 <SystemInit+0x20>)
 8002070:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002074:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002088:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800208c:	f7ff ffea 	bl	8002064 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002090:	480c      	ldr	r0, [pc, #48]	@ (80020c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002092:	490d      	ldr	r1, [pc, #52]	@ (80020c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002094:	4a0d      	ldr	r2, [pc, #52]	@ (80020cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002098:	e002      	b.n	80020a0 <LoopCopyDataInit>

0800209a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800209a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800209c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800209e:	3304      	adds	r3, #4

080020a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a4:	d3f9      	bcc.n	800209a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020a6:	4a0a      	ldr	r2, [pc, #40]	@ (80020d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020a8:	4c0a      	ldr	r4, [pc, #40]	@ (80020d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020ac:	e001      	b.n	80020b2 <LoopFillZerobss>

080020ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b0:	3204      	adds	r2, #4

080020b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b4:	d3fb      	bcc.n	80020ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80020b6:	f003 f869 	bl	800518c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ba:	f7ff f923 	bl	8001304 <main>
  bx  lr    
 80020be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80020c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80020cc:	08005b38 	.word	0x08005b38
  ldr r2, =_sbss
 80020d0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80020d4:	200002e4 	.word	0x200002e4

080020d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020d8:	e7fe      	b.n	80020d8 <ADC_IRQHandler>

080020da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020de:	2003      	movs	r0, #3
 80020e0:	f000 f92e 	bl	8002340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e4:	200f      	movs	r0, #15
 80020e6:	f000 f805 	bl	80020f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020ea:	f7ff fe4d 	bl	8001d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020fc:	4b12      	ldr	r3, [pc, #72]	@ (8002148 <HAL_InitTick+0x54>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b12      	ldr	r3, [pc, #72]	@ (800214c <HAL_InitTick+0x58>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800210a:	fbb3 f3f1 	udiv	r3, r3, r1
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f93b 	bl	800238e <HAL_SYSTICK_Config>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e00e      	b.n	8002140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b0f      	cmp	r3, #15
 8002126:	d80a      	bhi.n	800213e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002128:	2200      	movs	r2, #0
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	f04f 30ff 	mov.w	r0, #4294967295
 8002130:	f000 f911 	bl	8002356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002134:	4a06      	ldr	r2, [pc, #24]	@ (8002150 <HAL_InitTick+0x5c>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	e000      	b.n	8002140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000000 	.word	0x20000000
 800214c:	20000008 	.word	0x20000008
 8002150:	20000004 	.word	0x20000004

08002154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <HAL_IncTick+0x20>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <HAL_IncTick+0x24>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4413      	add	r3, r2
 8002164:	4a04      	ldr	r2, [pc, #16]	@ (8002178 <HAL_IncTick+0x24>)
 8002166:	6013      	str	r3, [r2, #0]
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000008 	.word	0x20000008
 8002178:	20000198 	.word	0x20000198

0800217c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return uwTick;
 8002180:	4b03      	ldr	r3, [pc, #12]	@ (8002190 <HAL_GetTick+0x14>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000198 	.word	0x20000198

08002194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800219c:	f7ff ffee 	bl	800217c <HAL_GetTick>
 80021a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ac:	d005      	beq.n	80021ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ae:	4b0a      	ldr	r3, [pc, #40]	@ (80021d8 <HAL_Delay+0x44>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4413      	add	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ba:	bf00      	nop
 80021bc:	f7ff ffde 	bl	800217c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d8f7      	bhi.n	80021bc <HAL_Delay+0x28>
  {
  }
}
 80021cc:	bf00      	nop
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000008 	.word	0x20000008

080021dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ec:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <__NVIC_SetPriorityGrouping+0x40>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021f8:	4013      	ands	r3, r2
 80021fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002204:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <__NVIC_SetPriorityGrouping+0x44>)
 8002206:	4313      	orrs	r3, r2
 8002208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220a:	4a04      	ldr	r2, [pc, #16]	@ (800221c <__NVIC_SetPriorityGrouping+0x40>)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	60d3      	str	r3, [r2, #12]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000ed00 	.word	0xe000ed00
 8002220:	05fa0000 	.word	0x05fa0000

08002224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002228:	4b04      	ldr	r3, [pc, #16]	@ (800223c <__NVIC_GetPriorityGrouping+0x18>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	f003 0307 	and.w	r3, r3, #7
}
 8002232:	4618      	mov	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	db0a      	blt.n	800226a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	490c      	ldr	r1, [pc, #48]	@ (800228c <__NVIC_SetPriority+0x4c>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	440b      	add	r3, r1
 8002264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002268:	e00a      	b.n	8002280 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4908      	ldr	r1, [pc, #32]	@ (8002290 <__NVIC_SetPriority+0x50>)
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	3b04      	subs	r3, #4
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	440b      	add	r3, r1
 800227e:	761a      	strb	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	@ 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f1c3 0307 	rsb	r3, r3, #7
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	bf28      	it	cs
 80022b2:	2304      	movcs	r3, #4
 80022b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d902      	bls.n	80022c4 <NVIC_EncodePriority+0x30>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3b03      	subs	r3, #3
 80022c2:	e000      	b.n	80022c6 <NVIC_EncodePriority+0x32>
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	401a      	ands	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022dc:	f04f 31ff 	mov.w	r1, #4294967295
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	4313      	orrs	r3, r2
         );
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	@ 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800230c:	d301      	bcc.n	8002312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230e:	2301      	movs	r3, #1
 8002310:	e00f      	b.n	8002332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002312:	4a0a      	ldr	r2, [pc, #40]	@ (800233c <SysTick_Config+0x40>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231a:	210f      	movs	r1, #15
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f7ff ff8e 	bl	8002240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002324:	4b05      	ldr	r3, [pc, #20]	@ (800233c <SysTick_Config+0x40>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232a:	4b04      	ldr	r3, [pc, #16]	@ (800233c <SysTick_Config+0x40>)
 800232c:	2207      	movs	r2, #7
 800232e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	e000e010 	.word	0xe000e010

08002340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff47 	bl	80021dc <__NVIC_SetPriorityGrouping>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002368:	f7ff ff5c 	bl	8002224 <__NVIC_GetPriorityGrouping>
 800236c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	6978      	ldr	r0, [r7, #20]
 8002374:	f7ff ff8e 	bl	8002294 <NVIC_EncodePriority>
 8002378:	4602      	mov	r2, r0
 800237a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff5d 	bl	8002240 <__NVIC_SetPriority>
}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ffb0 	bl	80022fc <SysTick_Config>
 800239c:	4603      	mov	r3, r0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b089      	sub	sp, #36	@ 0x24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	e175      	b.n	80026b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80023c8:	2201      	movs	r2, #1
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	f040 8164 	bne.w	80026ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d005      	beq.n	80023fe <HAL_GPIO_Init+0x56>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d130      	bne.n	8002460 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 0201 	and.w	r2, r3, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b03      	cmp	r3, #3
 800246a:	d017      	beq.n	800249c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	2203      	movs	r2, #3
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d123      	bne.n	80024f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	08da      	lsrs	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3208      	adds	r2, #8
 80024b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	08da      	lsrs	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3208      	adds	r2, #8
 80024ea:	69b9      	ldr	r1, [r7, #24]
 80024ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	2203      	movs	r2, #3
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0203 	and.w	r2, r3, #3
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80be 	beq.w	80026ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002532:	4b66      	ldr	r3, [pc, #408]	@ (80026cc <HAL_GPIO_Init+0x324>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002536:	4a65      	ldr	r2, [pc, #404]	@ (80026cc <HAL_GPIO_Init+0x324>)
 8002538:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800253c:	6453      	str	r3, [r2, #68]	@ 0x44
 800253e:	4b63      	ldr	r3, [pc, #396]	@ (80026cc <HAL_GPIO_Init+0x324>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800254a:	4a61      	ldr	r2, [pc, #388]	@ (80026d0 <HAL_GPIO_Init+0x328>)
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	089b      	lsrs	r3, r3, #2
 8002550:	3302      	adds	r3, #2
 8002552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	220f      	movs	r2, #15
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4013      	ands	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a58      	ldr	r2, [pc, #352]	@ (80026d4 <HAL_GPIO_Init+0x32c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d037      	beq.n	80025e6 <HAL_GPIO_Init+0x23e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a57      	ldr	r2, [pc, #348]	@ (80026d8 <HAL_GPIO_Init+0x330>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d031      	beq.n	80025e2 <HAL_GPIO_Init+0x23a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a56      	ldr	r2, [pc, #344]	@ (80026dc <HAL_GPIO_Init+0x334>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d02b      	beq.n	80025de <HAL_GPIO_Init+0x236>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a55      	ldr	r2, [pc, #340]	@ (80026e0 <HAL_GPIO_Init+0x338>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d025      	beq.n	80025da <HAL_GPIO_Init+0x232>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a54      	ldr	r2, [pc, #336]	@ (80026e4 <HAL_GPIO_Init+0x33c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d01f      	beq.n	80025d6 <HAL_GPIO_Init+0x22e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a53      	ldr	r2, [pc, #332]	@ (80026e8 <HAL_GPIO_Init+0x340>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d019      	beq.n	80025d2 <HAL_GPIO_Init+0x22a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a52      	ldr	r2, [pc, #328]	@ (80026ec <HAL_GPIO_Init+0x344>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d013      	beq.n	80025ce <HAL_GPIO_Init+0x226>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a51      	ldr	r2, [pc, #324]	@ (80026f0 <HAL_GPIO_Init+0x348>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00d      	beq.n	80025ca <HAL_GPIO_Init+0x222>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a50      	ldr	r2, [pc, #320]	@ (80026f4 <HAL_GPIO_Init+0x34c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d007      	beq.n	80025c6 <HAL_GPIO_Init+0x21e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a4f      	ldr	r2, [pc, #316]	@ (80026f8 <HAL_GPIO_Init+0x350>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d101      	bne.n	80025c2 <HAL_GPIO_Init+0x21a>
 80025be:	2309      	movs	r3, #9
 80025c0:	e012      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025c2:	230a      	movs	r3, #10
 80025c4:	e010      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025c6:	2308      	movs	r3, #8
 80025c8:	e00e      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025ca:	2307      	movs	r3, #7
 80025cc:	e00c      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025ce:	2306      	movs	r3, #6
 80025d0:	e00a      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025d2:	2305      	movs	r3, #5
 80025d4:	e008      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025d6:	2304      	movs	r3, #4
 80025d8:	e006      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025da:	2303      	movs	r3, #3
 80025dc:	e004      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025de:	2302      	movs	r3, #2
 80025e0:	e002      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025e6:	2300      	movs	r3, #0
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	f002 0203 	and.w	r2, r2, #3
 80025ee:	0092      	lsls	r2, r2, #2
 80025f0:	4093      	lsls	r3, r2
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025f8:	4935      	ldr	r1, [pc, #212]	@ (80026d0 <HAL_GPIO_Init+0x328>)
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	089b      	lsrs	r3, r3, #2
 80025fe:	3302      	adds	r3, #2
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002606:	4b3d      	ldr	r3, [pc, #244]	@ (80026fc <HAL_GPIO_Init+0x354>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800262a:	4a34      	ldr	r2, [pc, #208]	@ (80026fc <HAL_GPIO_Init+0x354>)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002630:	4b32      	ldr	r3, [pc, #200]	@ (80026fc <HAL_GPIO_Init+0x354>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002654:	4a29      	ldr	r2, [pc, #164]	@ (80026fc <HAL_GPIO_Init+0x354>)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800265a:	4b28      	ldr	r3, [pc, #160]	@ (80026fc <HAL_GPIO_Init+0x354>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800267e:	4a1f      	ldr	r2, [pc, #124]	@ (80026fc <HAL_GPIO_Init+0x354>)
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002684:	4b1d      	ldr	r3, [pc, #116]	@ (80026fc <HAL_GPIO_Init+0x354>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026a8:	4a14      	ldr	r2, [pc, #80]	@ (80026fc <HAL_GPIO_Init+0x354>)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3301      	adds	r3, #1
 80026b2:	61fb      	str	r3, [r7, #28]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	2b0f      	cmp	r3, #15
 80026b8:	f67f ae86 	bls.w	80023c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	3724      	adds	r7, #36	@ 0x24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40013800 	.word	0x40013800
 80026d4:	40020000 	.word	0x40020000
 80026d8:	40020400 	.word	0x40020400
 80026dc:	40020800 	.word	0x40020800
 80026e0:	40020c00 	.word	0x40020c00
 80026e4:	40021000 	.word	0x40021000
 80026e8:	40021400 	.word	0x40021400
 80026ec:	40021800 	.word	0x40021800
 80026f0:	40021c00 	.word	0x40021c00
 80026f4:	40022000 	.word	0x40022000
 80026f8:	40022400 	.word	0x40022400
 80026fc:	40013c00 	.word	0x40013c00

08002700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	807b      	strh	r3, [r7, #2]
 800270c:	4613      	mov	r3, r2
 800270e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002710:	787b      	ldrb	r3, [r7, #1]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002716:	887a      	ldrh	r2, [r7, #2]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800271c:	e003      	b.n	8002726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800271e:	887b      	ldrh	r3, [r7, #2]
 8002720:	041a      	lsls	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	619a      	str	r2, [r3, #24]
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800273c:	2300      	movs	r3, #0
 800273e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e291      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 8087 	beq.w	8002866 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002758:	4b96      	ldr	r3, [pc, #600]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 030c 	and.w	r3, r3, #12
 8002760:	2b04      	cmp	r3, #4
 8002762:	d00c      	beq.n	800277e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002764:	4b93      	ldr	r3, [pc, #588]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 030c 	and.w	r3, r3, #12
 800276c:	2b08      	cmp	r3, #8
 800276e:	d112      	bne.n	8002796 <HAL_RCC_OscConfig+0x62>
 8002770:	4b90      	ldr	r3, [pc, #576]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002778:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800277c:	d10b      	bne.n	8002796 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277e:	4b8d      	ldr	r3, [pc, #564]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d06c      	beq.n	8002864 <HAL_RCC_OscConfig+0x130>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d168      	bne.n	8002864 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e26b      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800279e:	d106      	bne.n	80027ae <HAL_RCC_OscConfig+0x7a>
 80027a0:	4b84      	ldr	r3, [pc, #528]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a83      	ldr	r2, [pc, #524]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	e02e      	b.n	800280c <HAL_RCC_OscConfig+0xd8>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCC_OscConfig+0x9c>
 80027b6:	4b7f      	ldr	r3, [pc, #508]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a7e      	ldr	r2, [pc, #504]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	4b7c      	ldr	r3, [pc, #496]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a7b      	ldr	r2, [pc, #492]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	e01d      	b.n	800280c <HAL_RCC_OscConfig+0xd8>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027d8:	d10c      	bne.n	80027f4 <HAL_RCC_OscConfig+0xc0>
 80027da:	4b76      	ldr	r3, [pc, #472]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a75      	ldr	r2, [pc, #468]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	4b73      	ldr	r3, [pc, #460]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a72      	ldr	r2, [pc, #456]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	e00b      	b.n	800280c <HAL_RCC_OscConfig+0xd8>
 80027f4:	4b6f      	ldr	r3, [pc, #444]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a6e      	ldr	r2, [pc, #440]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	4b6c      	ldr	r3, [pc, #432]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a6b      	ldr	r2, [pc, #428]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800280a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d013      	beq.n	800283c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7ff fcb2 	bl	800217c <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800281c:	f7ff fcae 	bl	800217c <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	@ 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e21f      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	4b61      	ldr	r3, [pc, #388]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0xe8>
 800283a:	e014      	b.n	8002866 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7ff fc9e 	bl	800217c <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002844:	f7ff fc9a 	bl	800217c <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b64      	cmp	r3, #100	@ 0x64
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e20b      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002856:	4b57      	ldr	r3, [pc, #348]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x110>
 8002862:	e000      	b.n	8002866 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d069      	beq.n	8002946 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002872:	4b50      	ldr	r3, [pc, #320]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800287e:	4b4d      	ldr	r3, [pc, #308]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b08      	cmp	r3, #8
 8002888:	d11c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x190>
 800288a:	4b4a      	ldr	r3, [pc, #296]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d116      	bne.n	80028c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002896:	4b47      	ldr	r3, [pc, #284]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_RCC_OscConfig+0x17a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e1df      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ae:	4b41      	ldr	r3, [pc, #260]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	493d      	ldr	r1, [pc, #244]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c2:	e040      	b.n	8002946 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d023      	beq.n	8002914 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028cc:	4b39      	ldr	r3, [pc, #228]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a38      	ldr	r2, [pc, #224]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7ff fc50 	bl	800217c <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e0:	f7ff fc4c 	bl	800217c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e1bd      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f2:	4b30      	ldr	r3, [pc, #192]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fe:	4b2d      	ldr	r3, [pc, #180]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4929      	ldr	r1, [pc, #164]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 800290e:	4313      	orrs	r3, r2
 8002910:	600b      	str	r3, [r1, #0]
 8002912:	e018      	b.n	8002946 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002914:	4b27      	ldr	r3, [pc, #156]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a26      	ldr	r2, [pc, #152]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 800291a:	f023 0301 	bic.w	r3, r3, #1
 800291e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7ff fc2c 	bl	800217c <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002928:	f7ff fc28 	bl	800217c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e199      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293a:	4b1e      	ldr	r3, [pc, #120]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d038      	beq.n	80029c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d019      	beq.n	800298e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295a:	4b16      	ldr	r3, [pc, #88]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 800295c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800295e:	4a15      	ldr	r2, [pc, #84]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002966:	f7ff fc09 	bl	800217c <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296e:	f7ff fc05 	bl	800217c <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e176      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002980:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x23a>
 800298c:	e01a      	b.n	80029c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298e:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002992:	4a08      	ldr	r2, [pc, #32]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299a:	f7ff fbef 	bl	800217c <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a0:	e00a      	b.n	80029b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a2:	f7ff fbeb 	bl	800217c <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d903      	bls.n	80029b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e15c      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
 80029b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b8:	4b91      	ldr	r3, [pc, #580]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 80029ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1ee      	bne.n	80029a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80a4 	beq.w	8002b1a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10d      	bne.n	80029fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80029de:	4b88      	ldr	r3, [pc, #544]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	4a87      	ldr	r2, [pc, #540]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 80029e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ea:	4b85      	ldr	r3, [pc, #532]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f6:	2301      	movs	r3, #1
 80029f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029fa:	4b82      	ldr	r3, [pc, #520]	@ (8002c04 <HAL_RCC_OscConfig+0x4d0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d118      	bne.n	8002a38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a06:	4b7f      	ldr	r3, [pc, #508]	@ (8002c04 <HAL_RCC_OscConfig+0x4d0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a7e      	ldr	r2, [pc, #504]	@ (8002c04 <HAL_RCC_OscConfig+0x4d0>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a12:	f7ff fbb3 	bl	800217c <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1a:	f7ff fbaf 	bl	800217c <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b64      	cmp	r3, #100	@ 0x64
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e120      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a2c:	4b75      	ldr	r3, [pc, #468]	@ (8002c04 <HAL_RCC_OscConfig+0x4d0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x31a>
 8002a40:	4b6f      	ldr	r3, [pc, #444]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a44:	4a6e      	ldr	r2, [pc, #440]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a4c:	e02d      	b.n	8002aaa <HAL_RCC_OscConfig+0x376>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x33c>
 8002a56:	4b6a      	ldr	r3, [pc, #424]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5a:	4a69      	ldr	r2, [pc, #420]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a62:	4b67      	ldr	r3, [pc, #412]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a66:	4a66      	ldr	r2, [pc, #408]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a68:	f023 0304 	bic.w	r3, r3, #4
 8002a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a6e:	e01c      	b.n	8002aaa <HAL_RCC_OscConfig+0x376>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b05      	cmp	r3, #5
 8002a76:	d10c      	bne.n	8002a92 <HAL_RCC_OscConfig+0x35e>
 8002a78:	4b61      	ldr	r3, [pc, #388]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7c:	4a60      	ldr	r2, [pc, #384]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a7e:	f043 0304 	orr.w	r3, r3, #4
 8002a82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a84:	4b5e      	ldr	r3, [pc, #376]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a88:	4a5d      	ldr	r2, [pc, #372]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a90:	e00b      	b.n	8002aaa <HAL_RCC_OscConfig+0x376>
 8002a92:	4b5b      	ldr	r3, [pc, #364]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a96:	4a5a      	ldr	r2, [pc, #360]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a9e:	4b58      	ldr	r3, [pc, #352]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa2:	4a57      	ldr	r2, [pc, #348]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002aa4:	f023 0304 	bic.w	r3, r3, #4
 8002aa8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d015      	beq.n	8002ade <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab2:	f7ff fb63 	bl	800217c <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab8:	e00a      	b.n	8002ad0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aba:	f7ff fb5f 	bl	800217c <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e0ce      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad0:	4b4b      	ldr	r3, [pc, #300]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0ee      	beq.n	8002aba <HAL_RCC_OscConfig+0x386>
 8002adc:	e014      	b.n	8002b08 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ade:	f7ff fb4d 	bl	800217c <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae4:	e00a      	b.n	8002afc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae6:	f7ff fb49 	bl	800217c <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e0b8      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002afc:	4b40      	ldr	r3, [pc, #256]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1ee      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b08:	7dfb      	ldrb	r3, [r7, #23]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d105      	bne.n	8002b1a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	4a3b      	ldr	r2, [pc, #236]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002b14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b18:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 80a4 	beq.w	8002c6c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b24:	4b36      	ldr	r3, [pc, #216]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d06b      	beq.n	8002c08 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d149      	bne.n	8002bcc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b38:	4b31      	ldr	r3, [pc, #196]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a30      	ldr	r2, [pc, #192]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002b3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7ff fb1a 	bl	800217c <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7ff fb16 	bl	800217c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e087      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5e:	4b28      	ldr	r3, [pc, #160]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69da      	ldr	r2, [r3, #28]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b78:	019b      	lsls	r3, r3, #6
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	3b01      	subs	r3, #1
 8002b84:	041b      	lsls	r3, r3, #16
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8c:	061b      	lsls	r3, r3, #24
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	4a1b      	ldr	r2, [pc, #108]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002b92:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002b96:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b98:	4b19      	ldr	r3, [pc, #100]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a18      	ldr	r2, [pc, #96]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002b9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba4:	f7ff faea 	bl	800217c <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bac:	f7ff fae6 	bl	800217c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e057      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbe:	4b10      	ldr	r3, [pc, #64]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0x478>
 8002bca:	e04f      	b.n	8002c6c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a0b      	ldr	r2, [pc, #44]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002bd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd8:	f7ff fad0 	bl	800217c <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be0:	f7ff facc 	bl	800217c <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e03d      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf2:	4b03      	ldr	r3, [pc, #12]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0x4ac>
 8002bfe:	e035      	b.n	8002c6c <HAL_RCC_OscConfig+0x538>
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c08:	4b1b      	ldr	r3, [pc, #108]	@ (8002c78 <HAL_RCC_OscConfig+0x544>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d028      	beq.n	8002c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d121      	bne.n	8002c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d11a      	bne.n	8002c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c38:	4013      	ands	r3, r2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c3e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d111      	bne.n	8002c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4e:	085b      	lsrs	r3, r3, #1
 8002c50:	3b01      	subs	r3, #1
 8002c52:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d107      	bne.n	8002c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c62:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800

08002c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0d0      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c94:	4b6a      	ldr	r3, [pc, #424]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d910      	bls.n	8002cc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca2:	4b67      	ldr	r3, [pc, #412]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 020f 	bic.w	r2, r3, #15
 8002caa:	4965      	ldr	r1, [pc, #404]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb2:	4b63      	ldr	r3, [pc, #396]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0b8      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d020      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cdc:	4b59      	ldr	r3, [pc, #356]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4a58      	ldr	r2, [pc, #352]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ce6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf4:	4b53      	ldr	r3, [pc, #332]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	4a52      	ldr	r2, [pc, #328]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002cfa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cfe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d00:	4b50      	ldr	r3, [pc, #320]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	494d      	ldr	r1, [pc, #308]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d040      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d107      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	4b47      	ldr	r3, [pc, #284]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d115      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e07f      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d107      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3e:	4b41      	ldr	r3, [pc, #260]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d109      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e073      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e06b      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d5e:	4b39      	ldr	r3, [pc, #228]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f023 0203 	bic.w	r2, r3, #3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	4936      	ldr	r1, [pc, #216]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d70:	f7ff fa04 	bl	800217c <HAL_GetTick>
 8002d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d76:	e00a      	b.n	8002d8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d78:	f7ff fa00 	bl	800217c <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e053      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8e:	4b2d      	ldr	r3, [pc, #180]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 020c 	and.w	r2, r3, #12
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d1eb      	bne.n	8002d78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002da0:	4b27      	ldr	r3, [pc, #156]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d210      	bcs.n	8002dd0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dae:	4b24      	ldr	r3, [pc, #144]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 020f 	bic.w	r2, r3, #15
 8002db6:	4922      	ldr	r1, [pc, #136]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbe:	4b20      	ldr	r3, [pc, #128]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e032      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ddc:	4b19      	ldr	r3, [pc, #100]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4916      	ldr	r1, [pc, #88]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dfa:	4b12      	ldr	r3, [pc, #72]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	490e      	ldr	r1, [pc, #56]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e0e:	f000 f821 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8002e12:	4602      	mov	r2, r0
 8002e14:	4b0b      	ldr	r3, [pc, #44]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	490a      	ldr	r1, [pc, #40]	@ (8002e48 <HAL_RCC_ClockConfig+0x1cc>)
 8002e20:	5ccb      	ldrb	r3, [r1, r3]
 8002e22:	fa22 f303 	lsr.w	r3, r2, r3
 8002e26:	4a09      	ldr	r2, [pc, #36]	@ (8002e4c <HAL_RCC_ClockConfig+0x1d0>)
 8002e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e2a:	4b09      	ldr	r3, [pc, #36]	@ (8002e50 <HAL_RCC_ClockConfig+0x1d4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff f960 	bl	80020f4 <HAL_InitTick>

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40023c00 	.word	0x40023c00
 8002e44:	40023800 	.word	0x40023800
 8002e48:	08005adc 	.word	0x08005adc
 8002e4c:	20000000 	.word	0x20000000
 8002e50:	20000004 	.word	0x20000004

08002e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e58:	b090      	sub	sp, #64	@ 0x40
 8002e5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e60:	2300      	movs	r3, #0
 8002e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e64:	2300      	movs	r3, #0
 8002e66:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e6c:	4b59      	ldr	r3, [pc, #356]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 030c 	and.w	r3, r3, #12
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d00d      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0x40>
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	f200 80a1 	bhi.w	8002fc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <HAL_RCC_GetSysClockFreq+0x34>
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d003      	beq.n	8002e8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e86:	e09b      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e88:	4b53      	ldr	r3, [pc, #332]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e8c:	e09b      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e8e:	4b53      	ldr	r3, [pc, #332]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8002e90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e92:	e098      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e94:	4b4f      	ldr	r3, [pc, #316]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e9e:	4b4d      	ldr	r3, [pc, #308]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d028      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eaa:	4b4a      	ldr	r3, [pc, #296]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	099b      	lsrs	r3, r3, #6
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	623b      	str	r3, [r7, #32]
 8002eb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4b47      	ldr	r3, [pc, #284]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8002ec0:	fb03 f201 	mul.w	r2, r3, r1
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	fb00 f303 	mul.w	r3, r0, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	4a43      	ldr	r2, [pc, #268]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8002ece:	fba0 1202 	umull	r1, r2, r0, r2
 8002ed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ed4:	460a      	mov	r2, r1
 8002ed6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ed8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eda:	4413      	add	r3, r2
 8002edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	61fa      	str	r2, [r7, #28]
 8002ee6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002eee:	f7fd fe05 	bl	8000afc <__aeabi_uldivmod>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002efa:	e053      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002efc:	4b35      	ldr	r3, [pc, #212]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	099b      	lsrs	r3, r3, #6
 8002f02:	2200      	movs	r2, #0
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	617a      	str	r2, [r7, #20]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f0e:	f04f 0b00 	mov.w	fp, #0
 8002f12:	4652      	mov	r2, sl
 8002f14:	465b      	mov	r3, fp
 8002f16:	f04f 0000 	mov.w	r0, #0
 8002f1a:	f04f 0100 	mov.w	r1, #0
 8002f1e:	0159      	lsls	r1, r3, #5
 8002f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f24:	0150      	lsls	r0, r2, #5
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	ebb2 080a 	subs.w	r8, r2, sl
 8002f2e:	eb63 090b 	sbc.w	r9, r3, fp
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f46:	ebb2 0408 	subs.w	r4, r2, r8
 8002f4a:	eb63 0509 	sbc.w	r5, r3, r9
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	00eb      	lsls	r3, r5, #3
 8002f58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f5c:	00e2      	lsls	r2, r4, #3
 8002f5e:	4614      	mov	r4, r2
 8002f60:	461d      	mov	r5, r3
 8002f62:	eb14 030a 	adds.w	r3, r4, sl
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	eb45 030b 	adc.w	r3, r5, fp
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f7a:	4629      	mov	r1, r5
 8002f7c:	028b      	lsls	r3, r1, #10
 8002f7e:	4621      	mov	r1, r4
 8002f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f84:	4621      	mov	r1, r4
 8002f86:	028a      	lsls	r2, r1, #10
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f8e:	2200      	movs	r2, #0
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	60fa      	str	r2, [r7, #12]
 8002f94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f98:	f7fd fdb0 	bl	8000afc <__aeabi_uldivmod>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	0c1b      	lsrs	r3, r3, #16
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002fb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fbe:	e002      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fc0:	4b05      	ldr	r3, [pc, #20]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3740      	adds	r7, #64	@ 0x40
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	00f42400 	.word	0x00f42400
 8002fdc:	017d7840 	.word	0x017d7840

08002fe0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fe4:	4b03      	ldr	r3, [pc, #12]	@ (8002ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20000000 	.word	0x20000000

08002ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ffc:	f7ff fff0 	bl	8002fe0 <HAL_RCC_GetHCLKFreq>
 8003000:	4602      	mov	r2, r0
 8003002:	4b05      	ldr	r3, [pc, #20]	@ (8003018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	0a9b      	lsrs	r3, r3, #10
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	4903      	ldr	r1, [pc, #12]	@ (800301c <HAL_RCC_GetPCLK1Freq+0x24>)
 800300e:	5ccb      	ldrb	r3, [r1, r3]
 8003010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003014:	4618      	mov	r0, r3
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40023800 	.word	0x40023800
 800301c:	08005aec 	.word	0x08005aec

08003020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003024:	f7ff ffdc 	bl	8002fe0 <HAL_RCC_GetHCLKFreq>
 8003028:	4602      	mov	r2, r0
 800302a:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	0b5b      	lsrs	r3, r3, #13
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	4903      	ldr	r1, [pc, #12]	@ (8003044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003036:	5ccb      	ldrb	r3, [r1, r3]
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800303c:	4618      	mov	r0, r3
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40023800 	.word	0x40023800
 8003044:	08005aec 	.word	0x08005aec

08003048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003060:	2300      	movs	r3, #0
 8003062:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d012      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003070:	4b69      	ldr	r3, [pc, #420]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	4a68      	ldr	r2, [pc, #416]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003076:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800307a:	6093      	str	r3, [r2, #8]
 800307c:	4b66      	ldr	r3, [pc, #408]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003084:	4964      	ldr	r1, [pc, #400]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003092:	2301      	movs	r3, #1
 8003094:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d017      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030a2:	4b5d      	ldr	r3, [pc, #372]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030a8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b0:	4959      	ldr	r1, [pc, #356]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030c0:	d101      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80030c2:	2301      	movs	r3, #1
 80030c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80030ce:	2301      	movs	r3, #1
 80030d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d017      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030de:	4b4e      	ldr	r3, [pc, #312]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030e4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ec:	494a      	ldr	r1, [pc, #296]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030fc:	d101      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80030fe:	2301      	movs	r3, #1
 8003100:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800310a:	2301      	movs	r3, #1
 800310c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800311a:	2301      	movs	r3, #1
 800311c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 808b 	beq.w	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800312c:	4b3a      	ldr	r3, [pc, #232]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003130:	4a39      	ldr	r2, [pc, #228]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003136:	6413      	str	r3, [r2, #64]	@ 0x40
 8003138:	4b37      	ldr	r3, [pc, #220]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003144:	4b35      	ldr	r3, [pc, #212]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a34      	ldr	r2, [pc, #208]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800314a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800314e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003150:	f7ff f814 	bl	800217c <HAL_GetTick>
 8003154:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003156:	e008      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003158:	f7ff f810 	bl	800217c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	@ 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e357      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800316a:	4b2c      	ldr	r3, [pc, #176]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003176:	4b28      	ldr	r3, [pc, #160]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800317e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d035      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	429a      	cmp	r2, r3
 8003192:	d02e      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003194:	4b20      	ldr	r3, [pc, #128]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003198:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800319c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800319e:	4b1e      	ldr	r3, [pc, #120]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031b4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80031b6:	4a18      	ldr	r2, [pc, #96]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80031bc:	4b16      	ldr	r3, [pc, #88]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d114      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fe ffd8 	bl	800217c <HAL_GetTick>
 80031cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ce:	e00a      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d0:	f7fe ffd4 	bl	800217c <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e319      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0ee      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031fe:	d111      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003200:	4b05      	ldr	r3, [pc, #20]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800320c:	4b04      	ldr	r3, [pc, #16]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800320e:	400b      	ands	r3, r1
 8003210:	4901      	ldr	r1, [pc, #4]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
 8003216:	e00b      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003218:	40023800 	.word	0x40023800
 800321c:	40007000 	.word	0x40007000
 8003220:	0ffffcff 	.word	0x0ffffcff
 8003224:	4baa      	ldr	r3, [pc, #680]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	4aa9      	ldr	r2, [pc, #676]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800322a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800322e:	6093      	str	r3, [r2, #8]
 8003230:	4ba7      	ldr	r3, [pc, #668]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003232:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323c:	49a4      	ldr	r1, [pc, #656]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800323e:	4313      	orrs	r3, r2
 8003240:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0310 	and.w	r3, r3, #16
 800324a:	2b00      	cmp	r3, #0
 800324c:	d010      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800324e:	4ba0      	ldr	r3, [pc, #640]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003250:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003254:	4a9e      	ldr	r2, [pc, #632]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003256:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800325a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800325e:	4b9c      	ldr	r3, [pc, #624]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003260:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003268:	4999      	ldr	r1, [pc, #612]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800327c:	4b94      	ldr	r3, [pc, #592]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003282:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800328a:	4991      	ldr	r1, [pc, #580]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800329e:	4b8c      	ldr	r3, [pc, #560]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032ac:	4988      	ldr	r1, [pc, #544]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032c0:	4b83      	ldr	r3, [pc, #524]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032ce:	4980      	ldr	r1, [pc, #512]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032e2:	4b7b      	ldr	r3, [pc, #492]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f0:	4977      	ldr	r1, [pc, #476]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003304:	4b72      	ldr	r3, [pc, #456]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800330a:	f023 0203 	bic.w	r2, r3, #3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003312:	496f      	ldr	r1, [pc, #444]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003326:	4b6a      	ldr	r3, [pc, #424]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332c:	f023 020c 	bic.w	r2, r3, #12
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003334:	4966      	ldr	r1, [pc, #408]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003348:	4b61      	ldr	r3, [pc, #388]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800334e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003356:	495e      	ldr	r1, [pc, #376]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800336a:	4b59      	ldr	r3, [pc, #356]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003370:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003378:	4955      	ldr	r1, [pc, #340]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800338c:	4b50      	ldr	r3, [pc, #320]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003392:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339a:	494d      	ldr	r1, [pc, #308]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80033ae:	4b48      	ldr	r3, [pc, #288]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033bc:	4944      	ldr	r1, [pc, #272]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80033d0:	4b3f      	ldr	r3, [pc, #252]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033de:	493c      	ldr	r1, [pc, #240]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80033f2:	4b37      	ldr	r3, [pc, #220]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003400:	4933      	ldr	r1, [pc, #204]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003414:	4b2e      	ldr	r3, [pc, #184]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003422:	492b      	ldr	r1, [pc, #172]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d011      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003436:	4b26      	ldr	r3, [pc, #152]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003444:	4922      	ldr	r1, [pc, #136]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003450:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003454:	d101      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003456:	2301      	movs	r3, #1
 8003458:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003466:	2301      	movs	r3, #1
 8003468:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003476:	4b16      	ldr	r3, [pc, #88]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003484:	4912      	ldr	r1, [pc, #72]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00b      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003498:	4b0d      	ldr	r3, [pc, #52]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034a8:	4909      	ldr	r1, [pc, #36]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d006      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80d9 	beq.w	8003676 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034c4:	4b02      	ldr	r3, [pc, #8]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a01      	ldr	r2, [pc, #4]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80034ce:	e001      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80034d0:	40023800 	.word	0x40023800
 80034d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d6:	f7fe fe51 	bl	800217c <HAL_GetTick>
 80034da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034dc:	e008      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034de:	f7fe fe4d 	bl	800217c <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b64      	cmp	r3, #100	@ 0x64
 80034ea:	d901      	bls.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e194      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034f0:	4b6c      	ldr	r3, [pc, #432]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f0      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d021      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350c:	2b00      	cmp	r3, #0
 800350e:	d11d      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003510:	4b64      	ldr	r3, [pc, #400]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003516:	0c1b      	lsrs	r3, r3, #16
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800351e:	4b61      	ldr	r3, [pc, #388]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003520:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003524:	0e1b      	lsrs	r3, r3, #24
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	019a      	lsls	r2, r3, #6
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	041b      	lsls	r3, r3, #16
 8003536:	431a      	orrs	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	061b      	lsls	r3, r3, #24
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	071b      	lsls	r3, r3, #28
 8003544:	4957      	ldr	r1, [pc, #348]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d004      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800356a:	2b00      	cmp	r3, #0
 800356c:	d02e      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003572:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003576:	d129      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003578:	4b4a      	ldr	r3, [pc, #296]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800357a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800357e:	0c1b      	lsrs	r3, r3, #16
 8003580:	f003 0303 	and.w	r3, r3, #3
 8003584:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003586:	4b47      	ldr	r3, [pc, #284]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003588:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800358c:	0f1b      	lsrs	r3, r3, #28
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	019a      	lsls	r2, r3, #6
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	041b      	lsls	r3, r3, #16
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	061b      	lsls	r3, r3, #24
 80035a6:	431a      	orrs	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	071b      	lsls	r3, r3, #28
 80035ac:	493d      	ldr	r1, [pc, #244]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80035b4:	4b3b      	ldr	r3, [pc, #236]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035ba:	f023 021f 	bic.w	r2, r3, #31
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c2:	3b01      	subs	r3, #1
 80035c4:	4937      	ldr	r1, [pc, #220]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d01d      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035d8:	4b32      	ldr	r3, [pc, #200]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035de:	0e1b      	lsrs	r3, r3, #24
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035e6:	4b2f      	ldr	r3, [pc, #188]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035ec:	0f1b      	lsrs	r3, r3, #28
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	019a      	lsls	r2, r3, #6
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	041b      	lsls	r3, r3, #16
 8003600:	431a      	orrs	r2, r3
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	061b      	lsls	r3, r3, #24
 8003606:	431a      	orrs	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	071b      	lsls	r3, r3, #28
 800360c:	4925      	ldr	r1, [pc, #148]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d011      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	019a      	lsls	r2, r3, #6
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	041b      	lsls	r3, r3, #16
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	061b      	lsls	r3, r3, #24
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	071b      	lsls	r3, r3, #28
 800363c:	4919      	ldr	r1, [pc, #100]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003644:	4b17      	ldr	r3, [pc, #92]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a16      	ldr	r2, [pc, #88]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800364a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800364e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003650:	f7fe fd94 	bl	800217c <HAL_GetTick>
 8003654:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003656:	e008      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003658:	f7fe fd90 	bl	800217c <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	@ 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e0d7      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800366a:	4b0e      	ldr	r3, [pc, #56]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b01      	cmp	r3, #1
 800367a:	f040 80cd 	bne.w	8003818 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800367e:	4b09      	ldr	r3, [pc, #36]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a08      	ldr	r2, [pc, #32]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003684:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003688:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800368a:	f7fe fd77 	bl	800217c <HAL_GetTick>
 800368e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003690:	e00a      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003692:	f7fe fd73 	bl	800217c <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b64      	cmp	r3, #100	@ 0x64
 800369e:	d903      	bls.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e0ba      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80036a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036a8:	4b5e      	ldr	r3, [pc, #376]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036b4:	d0ed      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x682>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d02e      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d12a      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036de:	4b51      	ldr	r3, [pc, #324]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e4:	0c1b      	lsrs	r3, r3, #16
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036ec:	4b4d      	ldr	r3, [pc, #308]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f2:	0f1b      	lsrs	r3, r3, #28
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	019a      	lsls	r2, r3, #6
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	041b      	lsls	r3, r3, #16
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	061b      	lsls	r3, r3, #24
 800370c:	431a      	orrs	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	071b      	lsls	r3, r3, #28
 8003712:	4944      	ldr	r1, [pc, #272]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800371a:	4b42      	ldr	r3, [pc, #264]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800371c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003720:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003728:	3b01      	subs	r3, #1
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	493d      	ldr	r1, [pc, #244]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d022      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003744:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003748:	d11d      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800374a:	4b36      	ldr	r3, [pc, #216]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003750:	0e1b      	lsrs	r3, r3, #24
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003758:	4b32      	ldr	r3, [pc, #200]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375e:	0f1b      	lsrs	r3, r3, #28
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	019a      	lsls	r2, r3, #6
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	041b      	lsls	r3, r3, #16
 8003772:	431a      	orrs	r2, r3
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	061b      	lsls	r3, r3, #24
 8003778:	431a      	orrs	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	071b      	lsls	r3, r3, #28
 800377e:	4929      	ldr	r1, [pc, #164]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d028      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003792:	4b24      	ldr	r3, [pc, #144]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003798:	0e1b      	lsrs	r3, r3, #24
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037a0:	4b20      	ldr	r3, [pc, #128]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a6:	0c1b      	lsrs	r3, r3, #16
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	019a      	lsls	r2, r3, #6
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	041b      	lsls	r3, r3, #16
 80037b8:	431a      	orrs	r2, r3
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	061b      	lsls	r3, r3, #24
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	071b      	lsls	r3, r3, #28
 80037c6:	4917      	ldr	r1, [pc, #92]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80037ce:	4b15      	ldr	r3, [pc, #84]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037dc:	4911      	ldr	r1, [pc, #68]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80037e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a0e      	ldr	r2, [pc, #56]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f0:	f7fe fcc4 	bl	800217c <HAL_GetTick>
 80037f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037f8:	f7fe fcc0 	bl	800217c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	@ 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e007      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800380a:	4b06      	ldr	r3, [pc, #24]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003812:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003816:	d1ef      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3720      	adds	r7, #32
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40023800 	.word	0x40023800

08003828 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e09d      	b.n	8003976 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	2b00      	cmp	r3, #0
 8003840:	d108      	bne.n	8003854 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800384a:	d009      	beq.n	8003860 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	61da      	str	r2, [r3, #28]
 8003852:	e005      	b.n	8003860 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fe faa8 	bl	8001dd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003896:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038a0:	d902      	bls.n	80038a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	e002      	b.n	80038ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80038a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80038b6:	d007      	beq.n	80038c8 <HAL_SPI_Init+0xa0>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038c0:	d002      	beq.n	80038c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800390a:	ea42 0103 	orr.w	r1, r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003912:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	0c1b      	lsrs	r3, r3, #16
 8003924:	f003 0204 	and.w	r2, r3, #4
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	431a      	orrs	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003944:	ea42 0103 	orr.w	r1, r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69da      	ldr	r2, [r3, #28]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003964:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b088      	sub	sp, #32
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	603b      	str	r3, [r7, #0]
 800398a:	4613      	mov	r3, r2
 800398c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800398e:	f7fe fbf5 	bl	800217c <HAL_GetTick>
 8003992:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003994:	88fb      	ldrh	r3, [r7, #6]
 8003996:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d001      	beq.n	80039a8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80039a4:	2302      	movs	r3, #2
 80039a6:	e15c      	b.n	8003c62 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <HAL_SPI_Transmit+0x36>
 80039ae:	88fb      	ldrh	r3, [r7, #6]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e154      	b.n	8003c62 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_SPI_Transmit+0x48>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e14d      	b.n	8003c62 <HAL_SPI_Transmit+0x2e4>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2203      	movs	r2, #3
 80039d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	88fa      	ldrh	r2, [r7, #6]
 80039e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	88fa      	ldrh	r2, [r7, #6]
 80039ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a18:	d10f      	bne.n	8003a3a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a44:	2b40      	cmp	r3, #64	@ 0x40
 8003a46:	d007      	beq.n	8003a58 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a60:	d952      	bls.n	8003b08 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_SPI_Transmit+0xf2>
 8003a6a:	8b7b      	ldrh	r3, [r7, #26]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d145      	bne.n	8003afc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a74:	881a      	ldrh	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a80:	1c9a      	adds	r2, r3, #2
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a94:	e032      	b.n	8003afc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d112      	bne.n	8003aca <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa8:	881a      	ldrh	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab4:	1c9a      	adds	r2, r3, #2
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ac8:	e018      	b.n	8003afc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aca:	f7fe fb57 	bl	800217c <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d803      	bhi.n	8003ae2 <HAL_SPI_Transmit+0x164>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae0:	d102      	bne.n	8003ae8 <HAL_SPI_Transmit+0x16a>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d109      	bne.n	8003afc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e0b2      	b.n	8003c62 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1c7      	bne.n	8003a96 <HAL_SPI_Transmit+0x118>
 8003b06:	e083      	b.n	8003c10 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_SPI_Transmit+0x198>
 8003b10:	8b7b      	ldrh	r3, [r7, #26]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d177      	bne.n	8003c06 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d912      	bls.n	8003b46 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b24:	881a      	ldrh	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b30:	1c9a      	adds	r2, r3, #2
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b02      	subs	r3, #2
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b44:	e05f      	b.n	8003c06 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	330c      	adds	r3, #12
 8003b50:	7812      	ldrb	r2, [r2, #0]
 8003b52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003b6c:	e04b      	b.n	8003c06 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d12b      	bne.n	8003bd4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d912      	bls.n	8003bac <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8a:	881a      	ldrh	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b96:	1c9a      	adds	r2, r3, #2
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b02      	subs	r3, #2
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003baa:	e02c      	b.n	8003c06 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	330c      	adds	r3, #12
 8003bb6:	7812      	ldrb	r2, [r2, #0]
 8003bb8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bd2:	e018      	b.n	8003c06 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bd4:	f7fe fad2 	bl	800217c <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d803      	bhi.n	8003bec <HAL_SPI_Transmit+0x26e>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bea:	d102      	bne.n	8003bf2 <HAL_SPI_Transmit+0x274>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d109      	bne.n	8003c06 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e02d      	b.n	8003c62 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1ae      	bne.n	8003b6e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	6839      	ldr	r1, [r7, #0]
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 fd19 	bl	800464c <SPI_EndRxTxTransaction>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10a      	bne.n	8003c44 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003c60:	2300      	movs	r3, #0
  }
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3720      	adds	r7, #32
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b088      	sub	sp, #32
 8003c6e:	af02      	add	r7, sp, #8
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	603b      	str	r3, [r7, #0]
 8003c76:	4613      	mov	r3, r2
 8003c78:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d001      	beq.n	8003c8a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003c86:	2302      	movs	r3, #2
 8003c88:	e123      	b.n	8003ed2 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <HAL_SPI_Receive+0x2c>
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e11b      	b.n	8003ed2 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ca2:	d112      	bne.n	8003cca <HAL_SPI_Receive+0x60>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10e      	bne.n	8003cca <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2204      	movs	r2, #4
 8003cb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003cb4:	88fa      	ldrh	r2, [r7, #6]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f90a 	bl	8003eda <HAL_SPI_TransmitReceive>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	e103      	b.n	8003ed2 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cca:	f7fe fa57 	bl	800217c <HAL_GetTick>
 8003cce:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_SPI_Receive+0x74>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e0f9      	b.n	8003ed2 <HAL_SPI_Receive+0x268>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2204      	movs	r2, #4
 8003cea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	88fa      	ldrh	r2, [r7, #6]
 8003cfe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	88fa      	ldrh	r2, [r7, #6]
 8003d06:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d30:	d908      	bls.n	8003d44 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	e007      	b.n	8003d54 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d52:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d5c:	d10f      	bne.n	8003d7e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d7c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d88:	2b40      	cmp	r3, #64	@ 0x40
 8003d8a:	d007      	beq.n	8003d9c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d9a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003da4:	d875      	bhi.n	8003e92 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003da6:	e037      	b.n	8003e18 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d117      	bne.n	8003de6 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f103 020c 	add.w	r2, r3, #12
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	7812      	ldrb	r2, [r2, #0]
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003de4:	e018      	b.n	8003e18 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003de6:	f7fe f9c9 	bl	800217c <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d803      	bhi.n	8003dfe <HAL_SPI_Receive+0x194>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d102      	bne.n	8003e04 <HAL_SPI_Receive+0x19a>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d109      	bne.n	8003e18 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e05c      	b.n	8003ed2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1c1      	bne.n	8003da8 <HAL_SPI_Receive+0x13e>
 8003e24:	e03b      	b.n	8003e9e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d115      	bne.n	8003e60 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3e:	b292      	uxth	r2, r2
 8003e40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	1c9a      	adds	r2, r3, #2
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003e5e:	e018      	b.n	8003e92 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e60:	f7fe f98c 	bl	800217c <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d803      	bhi.n	8003e78 <HAL_SPI_Receive+0x20e>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e76:	d102      	bne.n	8003e7e <HAL_SPI_Receive+0x214>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d109      	bne.n	8003e92 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e01f      	b.n	8003ed2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1c3      	bne.n	8003e26 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	6839      	ldr	r1, [r7, #0]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 fb56 	bl	8004554 <SPI_EndRxTransaction>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
  }
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b08a      	sub	sp, #40	@ 0x28
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]
 8003ee6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eec:	f7fe f946 	bl	800217c <HAL_GetTick>
 8003ef0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ef8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003f00:	887b      	ldrh	r3, [r7, #2]
 8003f02:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003f04:	887b      	ldrh	r3, [r7, #2]
 8003f06:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f08:	7ffb      	ldrb	r3, [r7, #31]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d00c      	beq.n	8003f28 <HAL_SPI_TransmitReceive+0x4e>
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f14:	d106      	bne.n	8003f24 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d102      	bne.n	8003f24 <HAL_SPI_TransmitReceive+0x4a>
 8003f1e:	7ffb      	ldrb	r3, [r7, #31]
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d001      	beq.n	8003f28 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003f24:	2302      	movs	r3, #2
 8003f26:	e1f3      	b.n	8004310 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <HAL_SPI_TransmitReceive+0x60>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_SPI_TransmitReceive+0x60>
 8003f34:	887b      	ldrh	r3, [r7, #2]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e1e8      	b.n	8004310 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_SPI_TransmitReceive+0x72>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e1e1      	b.n	8004310 <HAL_SPI_TransmitReceive+0x436>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d003      	beq.n	8003f68 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2205      	movs	r2, #5
 8003f64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	887a      	ldrh	r2, [r7, #2]
 8003f78:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	887a      	ldrh	r2, [r7, #2]
 8003f80:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	887a      	ldrh	r2, [r7, #2]
 8003f8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	887a      	ldrh	r2, [r7, #2]
 8003f94:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003faa:	d802      	bhi.n	8003fb2 <HAL_SPI_TransmitReceive+0xd8>
 8003fac:	8abb      	ldrh	r3, [r7, #20]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d908      	bls.n	8003fc4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003fc0:	605a      	str	r2, [r3, #4]
 8003fc2:	e007      	b.n	8003fd4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003fd2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fde:	2b40      	cmp	r3, #64	@ 0x40
 8003fe0:	d007      	beq.n	8003ff2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ff0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ffa:	f240 8083 	bls.w	8004104 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <HAL_SPI_TransmitReceive+0x132>
 8004006:	8afb      	ldrh	r3, [r7, #22]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d16f      	bne.n	80040ec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004010:	881a      	ldrh	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401c:	1c9a      	adds	r2, r3, #2
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004030:	e05c      	b.n	80040ec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b02      	cmp	r3, #2
 800403e:	d11b      	bne.n	8004078 <HAL_SPI_TransmitReceive+0x19e>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d016      	beq.n	8004078 <HAL_SPI_TransmitReceive+0x19e>
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	2b01      	cmp	r3, #1
 800404e:	d113      	bne.n	8004078 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004054:	881a      	ldrh	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004060:	1c9a      	adds	r2, r3, #2
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b01      	cmp	r3, #1
 8004084:	d11c      	bne.n	80040c0 <HAL_SPI_TransmitReceive+0x1e6>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d016      	beq.n	80040c0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409c:	b292      	uxth	r2, r2
 800409e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a4:	1c9a      	adds	r2, r3, #2
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040bc:	2301      	movs	r3, #1
 80040be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040c0:	f7fe f85c 	bl	800217c <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d80d      	bhi.n	80040ec <HAL_SPI_TransmitReceive+0x212>
 80040d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d6:	d009      	beq.n	80040ec <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e111      	b.n	8004310 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d19d      	bne.n	8004032 <HAL_SPI_TransmitReceive+0x158>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d197      	bne.n	8004032 <HAL_SPI_TransmitReceive+0x158>
 8004102:	e0e5      	b.n	80042d0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_SPI_TransmitReceive+0x23a>
 800410c:	8afb      	ldrh	r3, [r7, #22]
 800410e:	2b01      	cmp	r3, #1
 8004110:	f040 80d1 	bne.w	80042b6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b01      	cmp	r3, #1
 800411c:	d912      	bls.n	8004144 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004122:	881a      	ldrh	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412e:	1c9a      	adds	r2, r3, #2
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b02      	subs	r3, #2
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004142:	e0b8      	b.n	80042b6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	330c      	adds	r3, #12
 800414e:	7812      	ldrb	r2, [r2, #0]
 8004150:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800416a:	e0a4      	b.n	80042b6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b02      	cmp	r3, #2
 8004178:	d134      	bne.n	80041e4 <HAL_SPI_TransmitReceive+0x30a>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800417e:	b29b      	uxth	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d02f      	beq.n	80041e4 <HAL_SPI_TransmitReceive+0x30a>
 8004184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004186:	2b01      	cmp	r3, #1
 8004188:	d12c      	bne.n	80041e4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b01      	cmp	r3, #1
 8004192:	d912      	bls.n	80041ba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004198:	881a      	ldrh	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a4:	1c9a      	adds	r2, r3, #2
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b02      	subs	r3, #2
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041b8:	e012      	b.n	80041e0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	330c      	adds	r3, #12
 80041c4:	7812      	ldrb	r2, [r2, #0]
 80041c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d148      	bne.n	8004284 <HAL_SPI_TransmitReceive+0x3aa>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d042      	beq.n	8004284 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b01      	cmp	r3, #1
 8004208:	d923      	bls.n	8004252 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004214:	b292      	uxth	r2, r2
 8004216:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421c:	1c9a      	adds	r2, r3, #2
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004228:	b29b      	uxth	r3, r3
 800422a:	3b02      	subs	r3, #2
 800422c:	b29a      	uxth	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b01      	cmp	r3, #1
 800423e:	d81f      	bhi.n	8004280 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800424e:	605a      	str	r2, [r3, #4]
 8004250:	e016      	b.n	8004280 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f103 020c 	add.w	r2, r3, #12
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425e:	7812      	ldrb	r2, [r2, #0]
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004280:	2301      	movs	r3, #1
 8004282:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004284:	f7fd ff7a 	bl	800217c <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004290:	429a      	cmp	r2, r3
 8004292:	d803      	bhi.n	800429c <HAL_SPI_TransmitReceive+0x3c2>
 8004294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429a:	d102      	bne.n	80042a2 <HAL_SPI_TransmitReceive+0x3c8>
 800429c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d109      	bne.n	80042b6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e02c      	b.n	8004310 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f47f af55 	bne.w	800416c <HAL_SPI_TransmitReceive+0x292>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f47f af4e 	bne.w	800416c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042d0:	6a3a      	ldr	r2, [r7, #32]
 80042d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f9b9 	bl	800464c <SPI_EndRxTxTransaction>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d008      	beq.n	80042f2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2220      	movs	r2, #32
 80042e4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e00e      	b.n	8004310 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800430e:	2300      	movs	r3, #0
  }
}
 8004310:	4618      	mov	r0, r3
 8004312:	3728      	adds	r7, #40	@ 0x28
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	4613      	mov	r3, r2
 8004326:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004328:	f7fd ff28 	bl	800217c <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004330:	1a9b      	subs	r3, r3, r2
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	4413      	add	r3, r2
 8004336:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004338:	f7fd ff20 	bl	800217c <HAL_GetTick>
 800433c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800433e:	4b39      	ldr	r3, [pc, #228]	@ (8004424 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	015b      	lsls	r3, r3, #5
 8004344:	0d1b      	lsrs	r3, r3, #20
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	fb02 f303 	mul.w	r3, r2, r3
 800434c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800434e:	e055      	b.n	80043fc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004356:	d051      	beq.n	80043fc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004358:	f7fd ff10 	bl	800217c <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	429a      	cmp	r2, r3
 8004366:	d902      	bls.n	800436e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d13d      	bne.n	80043ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800437c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004386:	d111      	bne.n	80043ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004390:	d004      	beq.n	800439c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800439a:	d107      	bne.n	80043ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043b4:	d10f      	bne.n	80043d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e018      	b.n	800441c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d102      	bne.n	80043f6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	61fb      	str	r3, [r7, #28]
 80043f4:	e002      	b.n	80043fc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	4013      	ands	r3, r2
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	429a      	cmp	r2, r3
 800440a:	bf0c      	ite	eq
 800440c:	2301      	moveq	r3, #1
 800440e:	2300      	movne	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	461a      	mov	r2, r3
 8004414:	79fb      	ldrb	r3, [r7, #7]
 8004416:	429a      	cmp	r2, r3
 8004418:	d19a      	bne.n	8004350 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3720      	adds	r7, #32
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20000000 	.word	0x20000000

08004428 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b08a      	sub	sp, #40	@ 0x28
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004436:	2300      	movs	r3, #0
 8004438:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800443a:	f7fd fe9f 	bl	800217c <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004442:	1a9b      	subs	r3, r3, r2
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	4413      	add	r3, r2
 8004448:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800444a:	f7fd fe97 	bl	800217c <HAL_GetTick>
 800444e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	330c      	adds	r3, #12
 8004456:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004458:	4b3d      	ldr	r3, [pc, #244]	@ (8004550 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	00da      	lsls	r2, r3, #3
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	0d1b      	lsrs	r3, r3, #20
 8004468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800446a:	fb02 f303 	mul.w	r3, r2, r3
 800446e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004470:	e061      	b.n	8004536 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004478:	d107      	bne.n	800448a <SPI_WaitFifoStateUntilTimeout+0x62>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d104      	bne.n	800448a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004488:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004490:	d051      	beq.n	8004536 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004492:	f7fd fe73 	bl	800217c <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800449e:	429a      	cmp	r2, r3
 80044a0:	d902      	bls.n	80044a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80044a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d13d      	bne.n	8004524 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80044b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044c0:	d111      	bne.n	80044e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044ca:	d004      	beq.n	80044d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044d4:	d107      	bne.n	80044e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044ee:	d10f      	bne.n	8004510 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800450e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e011      	b.n	8004548 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d102      	bne.n	8004530 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	627b      	str	r3, [r7, #36]	@ 0x24
 800452e:	e002      	b.n	8004536 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	3b01      	subs	r3, #1
 8004534:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4013      	ands	r3, r2
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	429a      	cmp	r2, r3
 8004544:	d195      	bne.n	8004472 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3728      	adds	r7, #40	@ 0x28
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	20000000 	.word	0x20000000

08004554 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004568:	d111      	bne.n	800458e <SPI_EndRxTransaction+0x3a>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004572:	d004      	beq.n	800457e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800457c:	d107      	bne.n	800458e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800458c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004596:	d112      	bne.n	80045be <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2200      	movs	r2, #0
 80045a0:	2180      	movs	r1, #128	@ 0x80
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f7ff feb8 	bl	8004318 <SPI_WaitFlagStateUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d021      	beq.n	80045f2 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b2:	f043 0220 	orr.w	r2, r3, #32
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e03d      	b.n	800463a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80045be:	4b21      	ldr	r3, [pc, #132]	@ (8004644 <SPI_EndRxTransaction+0xf0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a21      	ldr	r2, [pc, #132]	@ (8004648 <SPI_EndRxTransaction+0xf4>)
 80045c4:	fba2 2303 	umull	r2, r3, r2, r3
 80045c8:	0d5b      	lsrs	r3, r3, #21
 80045ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80045ce:	fb02 f303 	mul.w	r3, r2, r3
 80045d2:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	3b01      	subs	r3, #1
 80045de:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ea:	2b80      	cmp	r3, #128	@ 0x80
 80045ec:	d0f2      	beq.n	80045d4 <SPI_EndRxTransaction+0x80>
 80045ee:	e000      	b.n	80045f2 <SPI_EndRxTransaction+0x9e>
        break;
 80045f0:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045fa:	d11d      	bne.n	8004638 <SPI_EndRxTransaction+0xe4>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004604:	d004      	beq.n	8004610 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800460e:	d113      	bne.n	8004638 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2200      	movs	r2, #0
 8004618:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f7ff ff03 	bl	8004428 <SPI_WaitFifoStateUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d007      	beq.n	8004638 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800462c:	f043 0220 	orr.w	r2, r3, #32
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e000      	b.n	800463a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20000000 	.word	0x20000000
 8004648:	165e9f81 	.word	0x165e9f81

0800464c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af02      	add	r7, sp, #8
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2200      	movs	r2, #0
 8004660:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f7ff fedf 	bl	8004428 <SPI_WaitFifoStateUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004674:	f043 0220 	orr.w	r2, r3, #32
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e046      	b.n	800470e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004680:	4b25      	ldr	r3, [pc, #148]	@ (8004718 <SPI_EndRxTxTransaction+0xcc>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a25      	ldr	r2, [pc, #148]	@ (800471c <SPI_EndRxTxTransaction+0xd0>)
 8004686:	fba2 2303 	umull	r2, r3, r2, r3
 800468a:	0d5b      	lsrs	r3, r3, #21
 800468c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004690:	fb02 f303 	mul.w	r3, r2, r3
 8004694:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800469e:	d112      	bne.n	80046c6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2200      	movs	r2, #0
 80046a8:	2180      	movs	r1, #128	@ 0x80
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f7ff fe34 	bl	8004318 <SPI_WaitFlagStateUntilTimeout>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d016      	beq.n	80046e4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ba:	f043 0220 	orr.w	r2, r3, #32
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e023      	b.n	800470e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046dc:	2b80      	cmp	r3, #128	@ 0x80
 80046de:	d0f2      	beq.n	80046c6 <SPI_EndRxTxTransaction+0x7a>
 80046e0:	e000      	b.n	80046e4 <SPI_EndRxTxTransaction+0x98>
        break;
 80046e2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f7ff fe99 	bl	8004428 <SPI_WaitFifoStateUntilTimeout>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d007      	beq.n	800470c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004700:	f043 0220 	orr.w	r2, r3, #32
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e000      	b.n	800470e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000000 	.word	0x20000000
 800471c:	165e9f81 	.word	0x165e9f81

08004720 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e040      	b.n	80047b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004736:	2b00      	cmp	r3, #0
 8004738:	d106      	bne.n	8004748 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7fd fba6 	bl	8001e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2224      	movs	r2, #36	@ 0x24
 800474c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0201 	bic.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fb16 	bl	8004d98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f8af 	bl	80048d0 <UART_SetConfig>
 8004772:	4603      	mov	r3, r0
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e01b      	b.n	80047b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800478a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800479a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 fb95 	bl	8004edc <UART_CheckIdleState>
 80047b2:	4603      	mov	r3, r0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08a      	sub	sp, #40	@ 0x28
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	4613      	mov	r3, r2
 80047ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	d177      	bne.n	80048c4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_UART_Transmit+0x24>
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e070      	b.n	80048c6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2221      	movs	r2, #33	@ 0x21
 80047f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047f2:	f7fd fcc3 	bl	800217c <HAL_GetTick>
 80047f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	88fa      	ldrh	r2, [r7, #6]
 80047fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	88fa      	ldrh	r2, [r7, #6]
 8004804:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004810:	d108      	bne.n	8004824 <HAL_UART_Transmit+0x68>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d104      	bne.n	8004824 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800481a:	2300      	movs	r3, #0
 800481c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	e003      	b.n	800482c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004828:	2300      	movs	r3, #0
 800482a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800482c:	e02f      	b.n	800488e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2200      	movs	r2, #0
 8004836:	2180      	movs	r1, #128	@ 0x80
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 fba6 	bl	8004f8a <UART_WaitOnFlagUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d004      	beq.n	800484e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2220      	movs	r2, #32
 8004848:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e03b      	b.n	80048c6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10b      	bne.n	800486c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004862:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	3302      	adds	r3, #2
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	e007      	b.n	800487c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	781a      	ldrb	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	3301      	adds	r3, #1
 800487a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004882:	b29b      	uxth	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	b29a      	uxth	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1c9      	bne.n	800482e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2200      	movs	r2, #0
 80048a2:	2140      	movs	r1, #64	@ 0x40
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 fb70 	bl	8004f8a <UART_WaitOnFlagUntilTimeout>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d004      	beq.n	80048ba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2220      	movs	r2, #32
 80048b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e005      	b.n	80048c6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	e000      	b.n	80048c6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80048c4:	2302      	movs	r3, #2
  }
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3720      	adds	r7, #32
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048d8:	2300      	movs	r3, #0
 80048da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	4ba6      	ldr	r3, [pc, #664]	@ (8004b94 <UART_SetConfig+0x2c4>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6812      	ldr	r2, [r2, #0]
 8004902:	6979      	ldr	r1, [r7, #20]
 8004904:	430b      	orrs	r3, r1
 8004906:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	4313      	orrs	r3, r2
 800492c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	430a      	orrs	r2, r1
 8004940:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a94      	ldr	r2, [pc, #592]	@ (8004b98 <UART_SetConfig+0x2c8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d120      	bne.n	800498e <UART_SetConfig+0xbe>
 800494c:	4b93      	ldr	r3, [pc, #588]	@ (8004b9c <UART_SetConfig+0x2cc>)
 800494e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b03      	cmp	r3, #3
 8004958:	d816      	bhi.n	8004988 <UART_SetConfig+0xb8>
 800495a:	a201      	add	r2, pc, #4	@ (adr r2, 8004960 <UART_SetConfig+0x90>)
 800495c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004960:	08004971 	.word	0x08004971
 8004964:	0800497d 	.word	0x0800497d
 8004968:	08004977 	.word	0x08004977
 800496c:	08004983 	.word	0x08004983
 8004970:	2301      	movs	r3, #1
 8004972:	77fb      	strb	r3, [r7, #31]
 8004974:	e150      	b.n	8004c18 <UART_SetConfig+0x348>
 8004976:	2302      	movs	r3, #2
 8004978:	77fb      	strb	r3, [r7, #31]
 800497a:	e14d      	b.n	8004c18 <UART_SetConfig+0x348>
 800497c:	2304      	movs	r3, #4
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e14a      	b.n	8004c18 <UART_SetConfig+0x348>
 8004982:	2308      	movs	r3, #8
 8004984:	77fb      	strb	r3, [r7, #31]
 8004986:	e147      	b.n	8004c18 <UART_SetConfig+0x348>
 8004988:	2310      	movs	r3, #16
 800498a:	77fb      	strb	r3, [r7, #31]
 800498c:	e144      	b.n	8004c18 <UART_SetConfig+0x348>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a83      	ldr	r2, [pc, #524]	@ (8004ba0 <UART_SetConfig+0x2d0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d132      	bne.n	80049fe <UART_SetConfig+0x12e>
 8004998:	4b80      	ldr	r3, [pc, #512]	@ (8004b9c <UART_SetConfig+0x2cc>)
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800499e:	f003 030c 	and.w	r3, r3, #12
 80049a2:	2b0c      	cmp	r3, #12
 80049a4:	d828      	bhi.n	80049f8 <UART_SetConfig+0x128>
 80049a6:	a201      	add	r2, pc, #4	@ (adr r2, 80049ac <UART_SetConfig+0xdc>)
 80049a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ac:	080049e1 	.word	0x080049e1
 80049b0:	080049f9 	.word	0x080049f9
 80049b4:	080049f9 	.word	0x080049f9
 80049b8:	080049f9 	.word	0x080049f9
 80049bc:	080049ed 	.word	0x080049ed
 80049c0:	080049f9 	.word	0x080049f9
 80049c4:	080049f9 	.word	0x080049f9
 80049c8:	080049f9 	.word	0x080049f9
 80049cc:	080049e7 	.word	0x080049e7
 80049d0:	080049f9 	.word	0x080049f9
 80049d4:	080049f9 	.word	0x080049f9
 80049d8:	080049f9 	.word	0x080049f9
 80049dc:	080049f3 	.word	0x080049f3
 80049e0:	2300      	movs	r3, #0
 80049e2:	77fb      	strb	r3, [r7, #31]
 80049e4:	e118      	b.n	8004c18 <UART_SetConfig+0x348>
 80049e6:	2302      	movs	r3, #2
 80049e8:	77fb      	strb	r3, [r7, #31]
 80049ea:	e115      	b.n	8004c18 <UART_SetConfig+0x348>
 80049ec:	2304      	movs	r3, #4
 80049ee:	77fb      	strb	r3, [r7, #31]
 80049f0:	e112      	b.n	8004c18 <UART_SetConfig+0x348>
 80049f2:	2308      	movs	r3, #8
 80049f4:	77fb      	strb	r3, [r7, #31]
 80049f6:	e10f      	b.n	8004c18 <UART_SetConfig+0x348>
 80049f8:	2310      	movs	r3, #16
 80049fa:	77fb      	strb	r3, [r7, #31]
 80049fc:	e10c      	b.n	8004c18 <UART_SetConfig+0x348>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a68      	ldr	r2, [pc, #416]	@ (8004ba4 <UART_SetConfig+0x2d4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d120      	bne.n	8004a4a <UART_SetConfig+0x17a>
 8004a08:	4b64      	ldr	r3, [pc, #400]	@ (8004b9c <UART_SetConfig+0x2cc>)
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a0e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a12:	2b30      	cmp	r3, #48	@ 0x30
 8004a14:	d013      	beq.n	8004a3e <UART_SetConfig+0x16e>
 8004a16:	2b30      	cmp	r3, #48	@ 0x30
 8004a18:	d814      	bhi.n	8004a44 <UART_SetConfig+0x174>
 8004a1a:	2b20      	cmp	r3, #32
 8004a1c:	d009      	beq.n	8004a32 <UART_SetConfig+0x162>
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d810      	bhi.n	8004a44 <UART_SetConfig+0x174>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <UART_SetConfig+0x15c>
 8004a26:	2b10      	cmp	r3, #16
 8004a28:	d006      	beq.n	8004a38 <UART_SetConfig+0x168>
 8004a2a:	e00b      	b.n	8004a44 <UART_SetConfig+0x174>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	77fb      	strb	r3, [r7, #31]
 8004a30:	e0f2      	b.n	8004c18 <UART_SetConfig+0x348>
 8004a32:	2302      	movs	r3, #2
 8004a34:	77fb      	strb	r3, [r7, #31]
 8004a36:	e0ef      	b.n	8004c18 <UART_SetConfig+0x348>
 8004a38:	2304      	movs	r3, #4
 8004a3a:	77fb      	strb	r3, [r7, #31]
 8004a3c:	e0ec      	b.n	8004c18 <UART_SetConfig+0x348>
 8004a3e:	2308      	movs	r3, #8
 8004a40:	77fb      	strb	r3, [r7, #31]
 8004a42:	e0e9      	b.n	8004c18 <UART_SetConfig+0x348>
 8004a44:	2310      	movs	r3, #16
 8004a46:	77fb      	strb	r3, [r7, #31]
 8004a48:	e0e6      	b.n	8004c18 <UART_SetConfig+0x348>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a56      	ldr	r2, [pc, #344]	@ (8004ba8 <UART_SetConfig+0x2d8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d120      	bne.n	8004a96 <UART_SetConfig+0x1c6>
 8004a54:	4b51      	ldr	r3, [pc, #324]	@ (8004b9c <UART_SetConfig+0x2cc>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a60:	d013      	beq.n	8004a8a <UART_SetConfig+0x1ba>
 8004a62:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a64:	d814      	bhi.n	8004a90 <UART_SetConfig+0x1c0>
 8004a66:	2b80      	cmp	r3, #128	@ 0x80
 8004a68:	d009      	beq.n	8004a7e <UART_SetConfig+0x1ae>
 8004a6a:	2b80      	cmp	r3, #128	@ 0x80
 8004a6c:	d810      	bhi.n	8004a90 <UART_SetConfig+0x1c0>
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <UART_SetConfig+0x1a8>
 8004a72:	2b40      	cmp	r3, #64	@ 0x40
 8004a74:	d006      	beq.n	8004a84 <UART_SetConfig+0x1b4>
 8004a76:	e00b      	b.n	8004a90 <UART_SetConfig+0x1c0>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	77fb      	strb	r3, [r7, #31]
 8004a7c:	e0cc      	b.n	8004c18 <UART_SetConfig+0x348>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	77fb      	strb	r3, [r7, #31]
 8004a82:	e0c9      	b.n	8004c18 <UART_SetConfig+0x348>
 8004a84:	2304      	movs	r3, #4
 8004a86:	77fb      	strb	r3, [r7, #31]
 8004a88:	e0c6      	b.n	8004c18 <UART_SetConfig+0x348>
 8004a8a:	2308      	movs	r3, #8
 8004a8c:	77fb      	strb	r3, [r7, #31]
 8004a8e:	e0c3      	b.n	8004c18 <UART_SetConfig+0x348>
 8004a90:	2310      	movs	r3, #16
 8004a92:	77fb      	strb	r3, [r7, #31]
 8004a94:	e0c0      	b.n	8004c18 <UART_SetConfig+0x348>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a44      	ldr	r2, [pc, #272]	@ (8004bac <UART_SetConfig+0x2dc>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d125      	bne.n	8004aec <UART_SetConfig+0x21c>
 8004aa0:	4b3e      	ldr	r3, [pc, #248]	@ (8004b9c <UART_SetConfig+0x2cc>)
 8004aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aae:	d017      	beq.n	8004ae0 <UART_SetConfig+0x210>
 8004ab0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ab4:	d817      	bhi.n	8004ae6 <UART_SetConfig+0x216>
 8004ab6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aba:	d00b      	beq.n	8004ad4 <UART_SetConfig+0x204>
 8004abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ac0:	d811      	bhi.n	8004ae6 <UART_SetConfig+0x216>
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <UART_SetConfig+0x1fe>
 8004ac6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aca:	d006      	beq.n	8004ada <UART_SetConfig+0x20a>
 8004acc:	e00b      	b.n	8004ae6 <UART_SetConfig+0x216>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	77fb      	strb	r3, [r7, #31]
 8004ad2:	e0a1      	b.n	8004c18 <UART_SetConfig+0x348>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	77fb      	strb	r3, [r7, #31]
 8004ad8:	e09e      	b.n	8004c18 <UART_SetConfig+0x348>
 8004ada:	2304      	movs	r3, #4
 8004adc:	77fb      	strb	r3, [r7, #31]
 8004ade:	e09b      	b.n	8004c18 <UART_SetConfig+0x348>
 8004ae0:	2308      	movs	r3, #8
 8004ae2:	77fb      	strb	r3, [r7, #31]
 8004ae4:	e098      	b.n	8004c18 <UART_SetConfig+0x348>
 8004ae6:	2310      	movs	r3, #16
 8004ae8:	77fb      	strb	r3, [r7, #31]
 8004aea:	e095      	b.n	8004c18 <UART_SetConfig+0x348>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a2f      	ldr	r2, [pc, #188]	@ (8004bb0 <UART_SetConfig+0x2e0>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d125      	bne.n	8004b42 <UART_SetConfig+0x272>
 8004af6:	4b29      	ldr	r3, [pc, #164]	@ (8004b9c <UART_SetConfig+0x2cc>)
 8004af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004afc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b04:	d017      	beq.n	8004b36 <UART_SetConfig+0x266>
 8004b06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b0a:	d817      	bhi.n	8004b3c <UART_SetConfig+0x26c>
 8004b0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b10:	d00b      	beq.n	8004b2a <UART_SetConfig+0x25a>
 8004b12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b16:	d811      	bhi.n	8004b3c <UART_SetConfig+0x26c>
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <UART_SetConfig+0x254>
 8004b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b20:	d006      	beq.n	8004b30 <UART_SetConfig+0x260>
 8004b22:	e00b      	b.n	8004b3c <UART_SetConfig+0x26c>
 8004b24:	2301      	movs	r3, #1
 8004b26:	77fb      	strb	r3, [r7, #31]
 8004b28:	e076      	b.n	8004c18 <UART_SetConfig+0x348>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	77fb      	strb	r3, [r7, #31]
 8004b2e:	e073      	b.n	8004c18 <UART_SetConfig+0x348>
 8004b30:	2304      	movs	r3, #4
 8004b32:	77fb      	strb	r3, [r7, #31]
 8004b34:	e070      	b.n	8004c18 <UART_SetConfig+0x348>
 8004b36:	2308      	movs	r3, #8
 8004b38:	77fb      	strb	r3, [r7, #31]
 8004b3a:	e06d      	b.n	8004c18 <UART_SetConfig+0x348>
 8004b3c:	2310      	movs	r3, #16
 8004b3e:	77fb      	strb	r3, [r7, #31]
 8004b40:	e06a      	b.n	8004c18 <UART_SetConfig+0x348>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a1b      	ldr	r2, [pc, #108]	@ (8004bb4 <UART_SetConfig+0x2e4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d138      	bne.n	8004bbe <UART_SetConfig+0x2ee>
 8004b4c:	4b13      	ldr	r3, [pc, #76]	@ (8004b9c <UART_SetConfig+0x2cc>)
 8004b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b52:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004b56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b5a:	d017      	beq.n	8004b8c <UART_SetConfig+0x2bc>
 8004b5c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b60:	d82a      	bhi.n	8004bb8 <UART_SetConfig+0x2e8>
 8004b62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b66:	d00b      	beq.n	8004b80 <UART_SetConfig+0x2b0>
 8004b68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b6c:	d824      	bhi.n	8004bb8 <UART_SetConfig+0x2e8>
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <UART_SetConfig+0x2aa>
 8004b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b76:	d006      	beq.n	8004b86 <UART_SetConfig+0x2b6>
 8004b78:	e01e      	b.n	8004bb8 <UART_SetConfig+0x2e8>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	77fb      	strb	r3, [r7, #31]
 8004b7e:	e04b      	b.n	8004c18 <UART_SetConfig+0x348>
 8004b80:	2302      	movs	r3, #2
 8004b82:	77fb      	strb	r3, [r7, #31]
 8004b84:	e048      	b.n	8004c18 <UART_SetConfig+0x348>
 8004b86:	2304      	movs	r3, #4
 8004b88:	77fb      	strb	r3, [r7, #31]
 8004b8a:	e045      	b.n	8004c18 <UART_SetConfig+0x348>
 8004b8c:	2308      	movs	r3, #8
 8004b8e:	77fb      	strb	r3, [r7, #31]
 8004b90:	e042      	b.n	8004c18 <UART_SetConfig+0x348>
 8004b92:	bf00      	nop
 8004b94:	efff69f3 	.word	0xefff69f3
 8004b98:	40011000 	.word	0x40011000
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	40004400 	.word	0x40004400
 8004ba4:	40004800 	.word	0x40004800
 8004ba8:	40004c00 	.word	0x40004c00
 8004bac:	40005000 	.word	0x40005000
 8004bb0:	40011400 	.word	0x40011400
 8004bb4:	40007800 	.word	0x40007800
 8004bb8:	2310      	movs	r3, #16
 8004bba:	77fb      	strb	r3, [r7, #31]
 8004bbc:	e02c      	b.n	8004c18 <UART_SetConfig+0x348>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a72      	ldr	r2, [pc, #456]	@ (8004d8c <UART_SetConfig+0x4bc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d125      	bne.n	8004c14 <UART_SetConfig+0x344>
 8004bc8:	4b71      	ldr	r3, [pc, #452]	@ (8004d90 <UART_SetConfig+0x4c0>)
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004bd2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004bd6:	d017      	beq.n	8004c08 <UART_SetConfig+0x338>
 8004bd8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004bdc:	d817      	bhi.n	8004c0e <UART_SetConfig+0x33e>
 8004bde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004be2:	d00b      	beq.n	8004bfc <UART_SetConfig+0x32c>
 8004be4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004be8:	d811      	bhi.n	8004c0e <UART_SetConfig+0x33e>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <UART_SetConfig+0x326>
 8004bee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bf2:	d006      	beq.n	8004c02 <UART_SetConfig+0x332>
 8004bf4:	e00b      	b.n	8004c0e <UART_SetConfig+0x33e>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	77fb      	strb	r3, [r7, #31]
 8004bfa:	e00d      	b.n	8004c18 <UART_SetConfig+0x348>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	77fb      	strb	r3, [r7, #31]
 8004c00:	e00a      	b.n	8004c18 <UART_SetConfig+0x348>
 8004c02:	2304      	movs	r3, #4
 8004c04:	77fb      	strb	r3, [r7, #31]
 8004c06:	e007      	b.n	8004c18 <UART_SetConfig+0x348>
 8004c08:	2308      	movs	r3, #8
 8004c0a:	77fb      	strb	r3, [r7, #31]
 8004c0c:	e004      	b.n	8004c18 <UART_SetConfig+0x348>
 8004c0e:	2310      	movs	r3, #16
 8004c10:	77fb      	strb	r3, [r7, #31]
 8004c12:	e001      	b.n	8004c18 <UART_SetConfig+0x348>
 8004c14:	2310      	movs	r3, #16
 8004c16:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c20:	d15b      	bne.n	8004cda <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004c22:	7ffb      	ldrb	r3, [r7, #31]
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d828      	bhi.n	8004c7a <UART_SetConfig+0x3aa>
 8004c28:	a201      	add	r2, pc, #4	@ (adr r2, 8004c30 <UART_SetConfig+0x360>)
 8004c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2e:	bf00      	nop
 8004c30:	08004c55 	.word	0x08004c55
 8004c34:	08004c5d 	.word	0x08004c5d
 8004c38:	08004c65 	.word	0x08004c65
 8004c3c:	08004c7b 	.word	0x08004c7b
 8004c40:	08004c6b 	.word	0x08004c6b
 8004c44:	08004c7b 	.word	0x08004c7b
 8004c48:	08004c7b 	.word	0x08004c7b
 8004c4c:	08004c7b 	.word	0x08004c7b
 8004c50:	08004c73 	.word	0x08004c73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c54:	f7fe f9d0 	bl	8002ff8 <HAL_RCC_GetPCLK1Freq>
 8004c58:	61b8      	str	r0, [r7, #24]
        break;
 8004c5a:	e013      	b.n	8004c84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c5c:	f7fe f9e0 	bl	8003020 <HAL_RCC_GetPCLK2Freq>
 8004c60:	61b8      	str	r0, [r7, #24]
        break;
 8004c62:	e00f      	b.n	8004c84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c64:	4b4b      	ldr	r3, [pc, #300]	@ (8004d94 <UART_SetConfig+0x4c4>)
 8004c66:	61bb      	str	r3, [r7, #24]
        break;
 8004c68:	e00c      	b.n	8004c84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c6a:	f7fe f8f3 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8004c6e:	61b8      	str	r0, [r7, #24]
        break;
 8004c70:	e008      	b.n	8004c84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c76:	61bb      	str	r3, [r7, #24]
        break;
 8004c78:	e004      	b.n	8004c84 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	77bb      	strb	r3, [r7, #30]
        break;
 8004c82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d074      	beq.n	8004d74 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	005a      	lsls	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	085b      	lsrs	r3, r3, #1
 8004c94:	441a      	add	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	2b0f      	cmp	r3, #15
 8004ca4:	d916      	bls.n	8004cd4 <UART_SetConfig+0x404>
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cac:	d212      	bcs.n	8004cd4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	f023 030f 	bic.w	r3, r3, #15
 8004cb6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	085b      	lsrs	r3, r3, #1
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	89fb      	ldrh	r3, [r7, #14]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	89fa      	ldrh	r2, [r7, #14]
 8004cd0:	60da      	str	r2, [r3, #12]
 8004cd2:	e04f      	b.n	8004d74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	77bb      	strb	r3, [r7, #30]
 8004cd8:	e04c      	b.n	8004d74 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cda:	7ffb      	ldrb	r3, [r7, #31]
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d828      	bhi.n	8004d32 <UART_SetConfig+0x462>
 8004ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce8 <UART_SetConfig+0x418>)
 8004ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce6:	bf00      	nop
 8004ce8:	08004d0d 	.word	0x08004d0d
 8004cec:	08004d15 	.word	0x08004d15
 8004cf0:	08004d1d 	.word	0x08004d1d
 8004cf4:	08004d33 	.word	0x08004d33
 8004cf8:	08004d23 	.word	0x08004d23
 8004cfc:	08004d33 	.word	0x08004d33
 8004d00:	08004d33 	.word	0x08004d33
 8004d04:	08004d33 	.word	0x08004d33
 8004d08:	08004d2b 	.word	0x08004d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d0c:	f7fe f974 	bl	8002ff8 <HAL_RCC_GetPCLK1Freq>
 8004d10:	61b8      	str	r0, [r7, #24]
        break;
 8004d12:	e013      	b.n	8004d3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d14:	f7fe f984 	bl	8003020 <HAL_RCC_GetPCLK2Freq>
 8004d18:	61b8      	str	r0, [r7, #24]
        break;
 8004d1a:	e00f      	b.n	8004d3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8004d94 <UART_SetConfig+0x4c4>)
 8004d1e:	61bb      	str	r3, [r7, #24]
        break;
 8004d20:	e00c      	b.n	8004d3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d22:	f7fe f897 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8004d26:	61b8      	str	r0, [r7, #24]
        break;
 8004d28:	e008      	b.n	8004d3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d2e:	61bb      	str	r3, [r7, #24]
        break;
 8004d30:	e004      	b.n	8004d3c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	77bb      	strb	r3, [r7, #30]
        break;
 8004d3a:	bf00      	nop
    }

    if (pclk != 0U)
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d018      	beq.n	8004d74 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	085a      	lsrs	r2, r3, #1
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	441a      	add	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	2b0f      	cmp	r3, #15
 8004d5a:	d909      	bls.n	8004d70 <UART_SetConfig+0x4a0>
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d62:	d205      	bcs.n	8004d70 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60da      	str	r2, [r3, #12]
 8004d6e:	e001      	b.n	8004d74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d80:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3720      	adds	r7, #32
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	40007c00 	.word	0x40007c00
 8004d90:	40023800 	.word	0x40023800
 8004d94:	00f42400 	.word	0x00f42400

08004d98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00a      	beq.n	8004e06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2c:	f003 0310 	and.w	r3, r3, #16
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00a      	beq.n	8004e4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d01a      	beq.n	8004eae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e96:	d10a      	bne.n	8004eae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	605a      	str	r2, [r3, #4]
  }
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08c      	sub	sp, #48	@ 0x30
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004eec:	f7fd f946 	bl	800217c <HAL_GetTick>
 8004ef0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0308 	and.w	r3, r3, #8
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d12e      	bne.n	8004f5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f83b 	bl	8004f8a <UART_WaitOnFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d021      	beq.n	8004f5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	e853 3f00 	ldrex	r3, [r3]
 8004f26:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f2e:	623b      	str	r3, [r7, #32]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	61fb      	str	r3, [r7, #28]
 8004f3a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3c:	69b9      	ldr	r1, [r7, #24]
 8004f3e:	69fa      	ldr	r2, [r7, #28]
 8004f40:	e841 2300 	strex	r3, r2, [r1]
 8004f44:	617b      	str	r3, [r7, #20]
   return(result);
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1e6      	bne.n	8004f1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e011      	b.n	8004f82 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2220      	movs	r2, #32
 8004f62:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3728      	adds	r7, #40	@ 0x28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b084      	sub	sp, #16
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	60f8      	str	r0, [r7, #12]
 8004f92:	60b9      	str	r1, [r7, #8]
 8004f94:	603b      	str	r3, [r7, #0]
 8004f96:	4613      	mov	r3, r2
 8004f98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f9a:	e04f      	b.n	800503c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa2:	d04b      	beq.n	800503c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa4:	f7fd f8ea 	bl	800217c <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d302      	bcc.n	8004fba <UART_WaitOnFlagUntilTimeout+0x30>
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e04e      	b.n	800505c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d037      	beq.n	800503c <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b80      	cmp	r3, #128	@ 0x80
 8004fd0:	d034      	beq.n	800503c <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b40      	cmp	r3, #64	@ 0x40
 8004fd6:	d031      	beq.n	800503c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b08      	cmp	r3, #8
 8004fe4:	d110      	bne.n	8005008 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2208      	movs	r2, #8
 8004fec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 f838 	bl	8005064 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e029      	b.n	800505c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005012:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005016:	d111      	bne.n	800503c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005020:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 f81e 	bl	8005064 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e00f      	b.n	800505c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	69da      	ldr	r2, [r3, #28]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	4013      	ands	r3, r2
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	429a      	cmp	r2, r3
 800504a:	bf0c      	ite	eq
 800504c:	2301      	moveq	r3, #1
 800504e:	2300      	movne	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	461a      	mov	r2, r3
 8005054:	79fb      	ldrb	r3, [r7, #7]
 8005056:	429a      	cmp	r2, r3
 8005058:	d0a0      	beq.n	8004f9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005064:	b480      	push	{r7}
 8005066:	b095      	sub	sp, #84	@ 0x54
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005074:	e853 3f00 	ldrex	r3, [r3]
 8005078:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800507a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005080:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800508a:	643b      	str	r3, [r7, #64]	@ 0x40
 800508c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005090:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005092:	e841 2300 	strex	r3, r2, [r1]
 8005096:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1e6      	bne.n	800506c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3308      	adds	r3, #8
 80050a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	f023 0301 	bic.w	r3, r3, #1
 80050b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3308      	adds	r3, #8
 80050bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e5      	bne.n	800509e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d118      	bne.n	800510c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	e853 3f00 	ldrex	r3, [r3]
 80050e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f023 0310 	bic.w	r3, r3, #16
 80050ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	6979      	ldr	r1, [r7, #20]
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	613b      	str	r3, [r7, #16]
   return(result);
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e6      	bne.n	80050da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005120:	bf00      	nop
 8005122:	3754      	adds	r7, #84	@ 0x54
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <siprintf>:
 800512c:	b40e      	push	{r1, r2, r3}
 800512e:	b510      	push	{r4, lr}
 8005130:	b09d      	sub	sp, #116	@ 0x74
 8005132:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005134:	9002      	str	r0, [sp, #8]
 8005136:	9006      	str	r0, [sp, #24]
 8005138:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800513c:	480a      	ldr	r0, [pc, #40]	@ (8005168 <siprintf+0x3c>)
 800513e:	9107      	str	r1, [sp, #28]
 8005140:	9104      	str	r1, [sp, #16]
 8005142:	490a      	ldr	r1, [pc, #40]	@ (800516c <siprintf+0x40>)
 8005144:	f853 2b04 	ldr.w	r2, [r3], #4
 8005148:	9105      	str	r1, [sp, #20]
 800514a:	2400      	movs	r4, #0
 800514c:	a902      	add	r1, sp, #8
 800514e:	6800      	ldr	r0, [r0, #0]
 8005150:	9301      	str	r3, [sp, #4]
 8005152:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005154:	f000 f994 	bl	8005480 <_svfiprintf_r>
 8005158:	9b02      	ldr	r3, [sp, #8]
 800515a:	701c      	strb	r4, [r3, #0]
 800515c:	b01d      	add	sp, #116	@ 0x74
 800515e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005162:	b003      	add	sp, #12
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	2000000c 	.word	0x2000000c
 800516c:	ffff0208 	.word	0xffff0208

08005170 <memset>:
 8005170:	4402      	add	r2, r0
 8005172:	4603      	mov	r3, r0
 8005174:	4293      	cmp	r3, r2
 8005176:	d100      	bne.n	800517a <memset+0xa>
 8005178:	4770      	bx	lr
 800517a:	f803 1b01 	strb.w	r1, [r3], #1
 800517e:	e7f9      	b.n	8005174 <memset+0x4>

08005180 <__errno>:
 8005180:	4b01      	ldr	r3, [pc, #4]	@ (8005188 <__errno+0x8>)
 8005182:	6818      	ldr	r0, [r3, #0]
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	2000000c 	.word	0x2000000c

0800518c <__libc_init_array>:
 800518c:	b570      	push	{r4, r5, r6, lr}
 800518e:	4d0d      	ldr	r5, [pc, #52]	@ (80051c4 <__libc_init_array+0x38>)
 8005190:	4c0d      	ldr	r4, [pc, #52]	@ (80051c8 <__libc_init_array+0x3c>)
 8005192:	1b64      	subs	r4, r4, r5
 8005194:	10a4      	asrs	r4, r4, #2
 8005196:	2600      	movs	r6, #0
 8005198:	42a6      	cmp	r6, r4
 800519a:	d109      	bne.n	80051b0 <__libc_init_array+0x24>
 800519c:	4d0b      	ldr	r5, [pc, #44]	@ (80051cc <__libc_init_array+0x40>)
 800519e:	4c0c      	ldr	r4, [pc, #48]	@ (80051d0 <__libc_init_array+0x44>)
 80051a0:	f000 fc64 	bl	8005a6c <_init>
 80051a4:	1b64      	subs	r4, r4, r5
 80051a6:	10a4      	asrs	r4, r4, #2
 80051a8:	2600      	movs	r6, #0
 80051aa:	42a6      	cmp	r6, r4
 80051ac:	d105      	bne.n	80051ba <__libc_init_array+0x2e>
 80051ae:	bd70      	pop	{r4, r5, r6, pc}
 80051b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051b4:	4798      	blx	r3
 80051b6:	3601      	adds	r6, #1
 80051b8:	e7ee      	b.n	8005198 <__libc_init_array+0xc>
 80051ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80051be:	4798      	blx	r3
 80051c0:	3601      	adds	r6, #1
 80051c2:	e7f2      	b.n	80051aa <__libc_init_array+0x1e>
 80051c4:	08005b30 	.word	0x08005b30
 80051c8:	08005b30 	.word	0x08005b30
 80051cc:	08005b30 	.word	0x08005b30
 80051d0:	08005b34 	.word	0x08005b34

080051d4 <__retarget_lock_acquire_recursive>:
 80051d4:	4770      	bx	lr

080051d6 <__retarget_lock_release_recursive>:
 80051d6:	4770      	bx	lr

080051d8 <_free_r>:
 80051d8:	b538      	push	{r3, r4, r5, lr}
 80051da:	4605      	mov	r5, r0
 80051dc:	2900      	cmp	r1, #0
 80051de:	d041      	beq.n	8005264 <_free_r+0x8c>
 80051e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051e4:	1f0c      	subs	r4, r1, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	bfb8      	it	lt
 80051ea:	18e4      	addlt	r4, r4, r3
 80051ec:	f000 f8e0 	bl	80053b0 <__malloc_lock>
 80051f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005268 <_free_r+0x90>)
 80051f2:	6813      	ldr	r3, [r2, #0]
 80051f4:	b933      	cbnz	r3, 8005204 <_free_r+0x2c>
 80051f6:	6063      	str	r3, [r4, #4]
 80051f8:	6014      	str	r4, [r2, #0]
 80051fa:	4628      	mov	r0, r5
 80051fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005200:	f000 b8dc 	b.w	80053bc <__malloc_unlock>
 8005204:	42a3      	cmp	r3, r4
 8005206:	d908      	bls.n	800521a <_free_r+0x42>
 8005208:	6820      	ldr	r0, [r4, #0]
 800520a:	1821      	adds	r1, r4, r0
 800520c:	428b      	cmp	r3, r1
 800520e:	bf01      	itttt	eq
 8005210:	6819      	ldreq	r1, [r3, #0]
 8005212:	685b      	ldreq	r3, [r3, #4]
 8005214:	1809      	addeq	r1, r1, r0
 8005216:	6021      	streq	r1, [r4, #0]
 8005218:	e7ed      	b.n	80051f6 <_free_r+0x1e>
 800521a:	461a      	mov	r2, r3
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	b10b      	cbz	r3, 8005224 <_free_r+0x4c>
 8005220:	42a3      	cmp	r3, r4
 8005222:	d9fa      	bls.n	800521a <_free_r+0x42>
 8005224:	6811      	ldr	r1, [r2, #0]
 8005226:	1850      	adds	r0, r2, r1
 8005228:	42a0      	cmp	r0, r4
 800522a:	d10b      	bne.n	8005244 <_free_r+0x6c>
 800522c:	6820      	ldr	r0, [r4, #0]
 800522e:	4401      	add	r1, r0
 8005230:	1850      	adds	r0, r2, r1
 8005232:	4283      	cmp	r3, r0
 8005234:	6011      	str	r1, [r2, #0]
 8005236:	d1e0      	bne.n	80051fa <_free_r+0x22>
 8005238:	6818      	ldr	r0, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	6053      	str	r3, [r2, #4]
 800523e:	4408      	add	r0, r1
 8005240:	6010      	str	r0, [r2, #0]
 8005242:	e7da      	b.n	80051fa <_free_r+0x22>
 8005244:	d902      	bls.n	800524c <_free_r+0x74>
 8005246:	230c      	movs	r3, #12
 8005248:	602b      	str	r3, [r5, #0]
 800524a:	e7d6      	b.n	80051fa <_free_r+0x22>
 800524c:	6820      	ldr	r0, [r4, #0]
 800524e:	1821      	adds	r1, r4, r0
 8005250:	428b      	cmp	r3, r1
 8005252:	bf04      	itt	eq
 8005254:	6819      	ldreq	r1, [r3, #0]
 8005256:	685b      	ldreq	r3, [r3, #4]
 8005258:	6063      	str	r3, [r4, #4]
 800525a:	bf04      	itt	eq
 800525c:	1809      	addeq	r1, r1, r0
 800525e:	6021      	streq	r1, [r4, #0]
 8005260:	6054      	str	r4, [r2, #4]
 8005262:	e7ca      	b.n	80051fa <_free_r+0x22>
 8005264:	bd38      	pop	{r3, r4, r5, pc}
 8005266:	bf00      	nop
 8005268:	200002e0 	.word	0x200002e0

0800526c <sbrk_aligned>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	4e0f      	ldr	r6, [pc, #60]	@ (80052ac <sbrk_aligned+0x40>)
 8005270:	460c      	mov	r4, r1
 8005272:	6831      	ldr	r1, [r6, #0]
 8005274:	4605      	mov	r5, r0
 8005276:	b911      	cbnz	r1, 800527e <sbrk_aligned+0x12>
 8005278:	f000 fba4 	bl	80059c4 <_sbrk_r>
 800527c:	6030      	str	r0, [r6, #0]
 800527e:	4621      	mov	r1, r4
 8005280:	4628      	mov	r0, r5
 8005282:	f000 fb9f 	bl	80059c4 <_sbrk_r>
 8005286:	1c43      	adds	r3, r0, #1
 8005288:	d103      	bne.n	8005292 <sbrk_aligned+0x26>
 800528a:	f04f 34ff 	mov.w	r4, #4294967295
 800528e:	4620      	mov	r0, r4
 8005290:	bd70      	pop	{r4, r5, r6, pc}
 8005292:	1cc4      	adds	r4, r0, #3
 8005294:	f024 0403 	bic.w	r4, r4, #3
 8005298:	42a0      	cmp	r0, r4
 800529a:	d0f8      	beq.n	800528e <sbrk_aligned+0x22>
 800529c:	1a21      	subs	r1, r4, r0
 800529e:	4628      	mov	r0, r5
 80052a0:	f000 fb90 	bl	80059c4 <_sbrk_r>
 80052a4:	3001      	adds	r0, #1
 80052a6:	d1f2      	bne.n	800528e <sbrk_aligned+0x22>
 80052a8:	e7ef      	b.n	800528a <sbrk_aligned+0x1e>
 80052aa:	bf00      	nop
 80052ac:	200002dc 	.word	0x200002dc

080052b0 <_malloc_r>:
 80052b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052b4:	1ccd      	adds	r5, r1, #3
 80052b6:	f025 0503 	bic.w	r5, r5, #3
 80052ba:	3508      	adds	r5, #8
 80052bc:	2d0c      	cmp	r5, #12
 80052be:	bf38      	it	cc
 80052c0:	250c      	movcc	r5, #12
 80052c2:	2d00      	cmp	r5, #0
 80052c4:	4606      	mov	r6, r0
 80052c6:	db01      	blt.n	80052cc <_malloc_r+0x1c>
 80052c8:	42a9      	cmp	r1, r5
 80052ca:	d904      	bls.n	80052d6 <_malloc_r+0x26>
 80052cc:	230c      	movs	r3, #12
 80052ce:	6033      	str	r3, [r6, #0]
 80052d0:	2000      	movs	r0, #0
 80052d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053ac <_malloc_r+0xfc>
 80052da:	f000 f869 	bl	80053b0 <__malloc_lock>
 80052de:	f8d8 3000 	ldr.w	r3, [r8]
 80052e2:	461c      	mov	r4, r3
 80052e4:	bb44      	cbnz	r4, 8005338 <_malloc_r+0x88>
 80052e6:	4629      	mov	r1, r5
 80052e8:	4630      	mov	r0, r6
 80052ea:	f7ff ffbf 	bl	800526c <sbrk_aligned>
 80052ee:	1c43      	adds	r3, r0, #1
 80052f0:	4604      	mov	r4, r0
 80052f2:	d158      	bne.n	80053a6 <_malloc_r+0xf6>
 80052f4:	f8d8 4000 	ldr.w	r4, [r8]
 80052f8:	4627      	mov	r7, r4
 80052fa:	2f00      	cmp	r7, #0
 80052fc:	d143      	bne.n	8005386 <_malloc_r+0xd6>
 80052fe:	2c00      	cmp	r4, #0
 8005300:	d04b      	beq.n	800539a <_malloc_r+0xea>
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	4639      	mov	r1, r7
 8005306:	4630      	mov	r0, r6
 8005308:	eb04 0903 	add.w	r9, r4, r3
 800530c:	f000 fb5a 	bl	80059c4 <_sbrk_r>
 8005310:	4581      	cmp	r9, r0
 8005312:	d142      	bne.n	800539a <_malloc_r+0xea>
 8005314:	6821      	ldr	r1, [r4, #0]
 8005316:	1a6d      	subs	r5, r5, r1
 8005318:	4629      	mov	r1, r5
 800531a:	4630      	mov	r0, r6
 800531c:	f7ff ffa6 	bl	800526c <sbrk_aligned>
 8005320:	3001      	adds	r0, #1
 8005322:	d03a      	beq.n	800539a <_malloc_r+0xea>
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	442b      	add	r3, r5
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	f8d8 3000 	ldr.w	r3, [r8]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	bb62      	cbnz	r2, 800538c <_malloc_r+0xdc>
 8005332:	f8c8 7000 	str.w	r7, [r8]
 8005336:	e00f      	b.n	8005358 <_malloc_r+0xa8>
 8005338:	6822      	ldr	r2, [r4, #0]
 800533a:	1b52      	subs	r2, r2, r5
 800533c:	d420      	bmi.n	8005380 <_malloc_r+0xd0>
 800533e:	2a0b      	cmp	r2, #11
 8005340:	d917      	bls.n	8005372 <_malloc_r+0xc2>
 8005342:	1961      	adds	r1, r4, r5
 8005344:	42a3      	cmp	r3, r4
 8005346:	6025      	str	r5, [r4, #0]
 8005348:	bf18      	it	ne
 800534a:	6059      	strne	r1, [r3, #4]
 800534c:	6863      	ldr	r3, [r4, #4]
 800534e:	bf08      	it	eq
 8005350:	f8c8 1000 	streq.w	r1, [r8]
 8005354:	5162      	str	r2, [r4, r5]
 8005356:	604b      	str	r3, [r1, #4]
 8005358:	4630      	mov	r0, r6
 800535a:	f000 f82f 	bl	80053bc <__malloc_unlock>
 800535e:	f104 000b 	add.w	r0, r4, #11
 8005362:	1d23      	adds	r3, r4, #4
 8005364:	f020 0007 	bic.w	r0, r0, #7
 8005368:	1ac2      	subs	r2, r0, r3
 800536a:	bf1c      	itt	ne
 800536c:	1a1b      	subne	r3, r3, r0
 800536e:	50a3      	strne	r3, [r4, r2]
 8005370:	e7af      	b.n	80052d2 <_malloc_r+0x22>
 8005372:	6862      	ldr	r2, [r4, #4]
 8005374:	42a3      	cmp	r3, r4
 8005376:	bf0c      	ite	eq
 8005378:	f8c8 2000 	streq.w	r2, [r8]
 800537c:	605a      	strne	r2, [r3, #4]
 800537e:	e7eb      	b.n	8005358 <_malloc_r+0xa8>
 8005380:	4623      	mov	r3, r4
 8005382:	6864      	ldr	r4, [r4, #4]
 8005384:	e7ae      	b.n	80052e4 <_malloc_r+0x34>
 8005386:	463c      	mov	r4, r7
 8005388:	687f      	ldr	r7, [r7, #4]
 800538a:	e7b6      	b.n	80052fa <_malloc_r+0x4a>
 800538c:	461a      	mov	r2, r3
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	42a3      	cmp	r3, r4
 8005392:	d1fb      	bne.n	800538c <_malloc_r+0xdc>
 8005394:	2300      	movs	r3, #0
 8005396:	6053      	str	r3, [r2, #4]
 8005398:	e7de      	b.n	8005358 <_malloc_r+0xa8>
 800539a:	230c      	movs	r3, #12
 800539c:	6033      	str	r3, [r6, #0]
 800539e:	4630      	mov	r0, r6
 80053a0:	f000 f80c 	bl	80053bc <__malloc_unlock>
 80053a4:	e794      	b.n	80052d0 <_malloc_r+0x20>
 80053a6:	6005      	str	r5, [r0, #0]
 80053a8:	e7d6      	b.n	8005358 <_malloc_r+0xa8>
 80053aa:	bf00      	nop
 80053ac:	200002e0 	.word	0x200002e0

080053b0 <__malloc_lock>:
 80053b0:	4801      	ldr	r0, [pc, #4]	@ (80053b8 <__malloc_lock+0x8>)
 80053b2:	f7ff bf0f 	b.w	80051d4 <__retarget_lock_acquire_recursive>
 80053b6:	bf00      	nop
 80053b8:	200002d8 	.word	0x200002d8

080053bc <__malloc_unlock>:
 80053bc:	4801      	ldr	r0, [pc, #4]	@ (80053c4 <__malloc_unlock+0x8>)
 80053be:	f7ff bf0a 	b.w	80051d6 <__retarget_lock_release_recursive>
 80053c2:	bf00      	nop
 80053c4:	200002d8 	.word	0x200002d8

080053c8 <__ssputs_r>:
 80053c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053cc:	688e      	ldr	r6, [r1, #8]
 80053ce:	461f      	mov	r7, r3
 80053d0:	42be      	cmp	r6, r7
 80053d2:	680b      	ldr	r3, [r1, #0]
 80053d4:	4682      	mov	sl, r0
 80053d6:	460c      	mov	r4, r1
 80053d8:	4690      	mov	r8, r2
 80053da:	d82d      	bhi.n	8005438 <__ssputs_r+0x70>
 80053dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80053e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80053e4:	d026      	beq.n	8005434 <__ssputs_r+0x6c>
 80053e6:	6965      	ldr	r5, [r4, #20]
 80053e8:	6909      	ldr	r1, [r1, #16]
 80053ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053ee:	eba3 0901 	sub.w	r9, r3, r1
 80053f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053f6:	1c7b      	adds	r3, r7, #1
 80053f8:	444b      	add	r3, r9
 80053fa:	106d      	asrs	r5, r5, #1
 80053fc:	429d      	cmp	r5, r3
 80053fe:	bf38      	it	cc
 8005400:	461d      	movcc	r5, r3
 8005402:	0553      	lsls	r3, r2, #21
 8005404:	d527      	bpl.n	8005456 <__ssputs_r+0x8e>
 8005406:	4629      	mov	r1, r5
 8005408:	f7ff ff52 	bl	80052b0 <_malloc_r>
 800540c:	4606      	mov	r6, r0
 800540e:	b360      	cbz	r0, 800546a <__ssputs_r+0xa2>
 8005410:	6921      	ldr	r1, [r4, #16]
 8005412:	464a      	mov	r2, r9
 8005414:	f000 fae6 	bl	80059e4 <memcpy>
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800541e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005422:	81a3      	strh	r3, [r4, #12]
 8005424:	6126      	str	r6, [r4, #16]
 8005426:	6165      	str	r5, [r4, #20]
 8005428:	444e      	add	r6, r9
 800542a:	eba5 0509 	sub.w	r5, r5, r9
 800542e:	6026      	str	r6, [r4, #0]
 8005430:	60a5      	str	r5, [r4, #8]
 8005432:	463e      	mov	r6, r7
 8005434:	42be      	cmp	r6, r7
 8005436:	d900      	bls.n	800543a <__ssputs_r+0x72>
 8005438:	463e      	mov	r6, r7
 800543a:	6820      	ldr	r0, [r4, #0]
 800543c:	4632      	mov	r2, r6
 800543e:	4641      	mov	r1, r8
 8005440:	f000 faa6 	bl	8005990 <memmove>
 8005444:	68a3      	ldr	r3, [r4, #8]
 8005446:	1b9b      	subs	r3, r3, r6
 8005448:	60a3      	str	r3, [r4, #8]
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	4433      	add	r3, r6
 800544e:	6023      	str	r3, [r4, #0]
 8005450:	2000      	movs	r0, #0
 8005452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005456:	462a      	mov	r2, r5
 8005458:	f000 fad2 	bl	8005a00 <_realloc_r>
 800545c:	4606      	mov	r6, r0
 800545e:	2800      	cmp	r0, #0
 8005460:	d1e0      	bne.n	8005424 <__ssputs_r+0x5c>
 8005462:	6921      	ldr	r1, [r4, #16]
 8005464:	4650      	mov	r0, sl
 8005466:	f7ff feb7 	bl	80051d8 <_free_r>
 800546a:	230c      	movs	r3, #12
 800546c:	f8ca 3000 	str.w	r3, [sl]
 8005470:	89a3      	ldrh	r3, [r4, #12]
 8005472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005476:	81a3      	strh	r3, [r4, #12]
 8005478:	f04f 30ff 	mov.w	r0, #4294967295
 800547c:	e7e9      	b.n	8005452 <__ssputs_r+0x8a>
	...

08005480 <_svfiprintf_r>:
 8005480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005484:	4698      	mov	r8, r3
 8005486:	898b      	ldrh	r3, [r1, #12]
 8005488:	061b      	lsls	r3, r3, #24
 800548a:	b09d      	sub	sp, #116	@ 0x74
 800548c:	4607      	mov	r7, r0
 800548e:	460d      	mov	r5, r1
 8005490:	4614      	mov	r4, r2
 8005492:	d510      	bpl.n	80054b6 <_svfiprintf_r+0x36>
 8005494:	690b      	ldr	r3, [r1, #16]
 8005496:	b973      	cbnz	r3, 80054b6 <_svfiprintf_r+0x36>
 8005498:	2140      	movs	r1, #64	@ 0x40
 800549a:	f7ff ff09 	bl	80052b0 <_malloc_r>
 800549e:	6028      	str	r0, [r5, #0]
 80054a0:	6128      	str	r0, [r5, #16]
 80054a2:	b930      	cbnz	r0, 80054b2 <_svfiprintf_r+0x32>
 80054a4:	230c      	movs	r3, #12
 80054a6:	603b      	str	r3, [r7, #0]
 80054a8:	f04f 30ff 	mov.w	r0, #4294967295
 80054ac:	b01d      	add	sp, #116	@ 0x74
 80054ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b2:	2340      	movs	r3, #64	@ 0x40
 80054b4:	616b      	str	r3, [r5, #20]
 80054b6:	2300      	movs	r3, #0
 80054b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80054ba:	2320      	movs	r3, #32
 80054bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80054c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80054c4:	2330      	movs	r3, #48	@ 0x30
 80054c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005664 <_svfiprintf_r+0x1e4>
 80054ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80054ce:	f04f 0901 	mov.w	r9, #1
 80054d2:	4623      	mov	r3, r4
 80054d4:	469a      	mov	sl, r3
 80054d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054da:	b10a      	cbz	r2, 80054e0 <_svfiprintf_r+0x60>
 80054dc:	2a25      	cmp	r2, #37	@ 0x25
 80054de:	d1f9      	bne.n	80054d4 <_svfiprintf_r+0x54>
 80054e0:	ebba 0b04 	subs.w	fp, sl, r4
 80054e4:	d00b      	beq.n	80054fe <_svfiprintf_r+0x7e>
 80054e6:	465b      	mov	r3, fp
 80054e8:	4622      	mov	r2, r4
 80054ea:	4629      	mov	r1, r5
 80054ec:	4638      	mov	r0, r7
 80054ee:	f7ff ff6b 	bl	80053c8 <__ssputs_r>
 80054f2:	3001      	adds	r0, #1
 80054f4:	f000 80a7 	beq.w	8005646 <_svfiprintf_r+0x1c6>
 80054f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054fa:	445a      	add	r2, fp
 80054fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80054fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 809f 	beq.w	8005646 <_svfiprintf_r+0x1c6>
 8005508:	2300      	movs	r3, #0
 800550a:	f04f 32ff 	mov.w	r2, #4294967295
 800550e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005512:	f10a 0a01 	add.w	sl, sl, #1
 8005516:	9304      	str	r3, [sp, #16]
 8005518:	9307      	str	r3, [sp, #28]
 800551a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800551e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005520:	4654      	mov	r4, sl
 8005522:	2205      	movs	r2, #5
 8005524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005528:	484e      	ldr	r0, [pc, #312]	@ (8005664 <_svfiprintf_r+0x1e4>)
 800552a:	f7fa fe79 	bl	8000220 <memchr>
 800552e:	9a04      	ldr	r2, [sp, #16]
 8005530:	b9d8      	cbnz	r0, 800556a <_svfiprintf_r+0xea>
 8005532:	06d0      	lsls	r0, r2, #27
 8005534:	bf44      	itt	mi
 8005536:	2320      	movmi	r3, #32
 8005538:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800553c:	0711      	lsls	r1, r2, #28
 800553e:	bf44      	itt	mi
 8005540:	232b      	movmi	r3, #43	@ 0x2b
 8005542:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005546:	f89a 3000 	ldrb.w	r3, [sl]
 800554a:	2b2a      	cmp	r3, #42	@ 0x2a
 800554c:	d015      	beq.n	800557a <_svfiprintf_r+0xfa>
 800554e:	9a07      	ldr	r2, [sp, #28]
 8005550:	4654      	mov	r4, sl
 8005552:	2000      	movs	r0, #0
 8005554:	f04f 0c0a 	mov.w	ip, #10
 8005558:	4621      	mov	r1, r4
 800555a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800555e:	3b30      	subs	r3, #48	@ 0x30
 8005560:	2b09      	cmp	r3, #9
 8005562:	d94b      	bls.n	80055fc <_svfiprintf_r+0x17c>
 8005564:	b1b0      	cbz	r0, 8005594 <_svfiprintf_r+0x114>
 8005566:	9207      	str	r2, [sp, #28]
 8005568:	e014      	b.n	8005594 <_svfiprintf_r+0x114>
 800556a:	eba0 0308 	sub.w	r3, r0, r8
 800556e:	fa09 f303 	lsl.w	r3, r9, r3
 8005572:	4313      	orrs	r3, r2
 8005574:	9304      	str	r3, [sp, #16]
 8005576:	46a2      	mov	sl, r4
 8005578:	e7d2      	b.n	8005520 <_svfiprintf_r+0xa0>
 800557a:	9b03      	ldr	r3, [sp, #12]
 800557c:	1d19      	adds	r1, r3, #4
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	9103      	str	r1, [sp, #12]
 8005582:	2b00      	cmp	r3, #0
 8005584:	bfbb      	ittet	lt
 8005586:	425b      	neglt	r3, r3
 8005588:	f042 0202 	orrlt.w	r2, r2, #2
 800558c:	9307      	strge	r3, [sp, #28]
 800558e:	9307      	strlt	r3, [sp, #28]
 8005590:	bfb8      	it	lt
 8005592:	9204      	strlt	r2, [sp, #16]
 8005594:	7823      	ldrb	r3, [r4, #0]
 8005596:	2b2e      	cmp	r3, #46	@ 0x2e
 8005598:	d10a      	bne.n	80055b0 <_svfiprintf_r+0x130>
 800559a:	7863      	ldrb	r3, [r4, #1]
 800559c:	2b2a      	cmp	r3, #42	@ 0x2a
 800559e:	d132      	bne.n	8005606 <_svfiprintf_r+0x186>
 80055a0:	9b03      	ldr	r3, [sp, #12]
 80055a2:	1d1a      	adds	r2, r3, #4
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	9203      	str	r2, [sp, #12]
 80055a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055ac:	3402      	adds	r4, #2
 80055ae:	9305      	str	r3, [sp, #20]
 80055b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005674 <_svfiprintf_r+0x1f4>
 80055b4:	7821      	ldrb	r1, [r4, #0]
 80055b6:	2203      	movs	r2, #3
 80055b8:	4650      	mov	r0, sl
 80055ba:	f7fa fe31 	bl	8000220 <memchr>
 80055be:	b138      	cbz	r0, 80055d0 <_svfiprintf_r+0x150>
 80055c0:	9b04      	ldr	r3, [sp, #16]
 80055c2:	eba0 000a 	sub.w	r0, r0, sl
 80055c6:	2240      	movs	r2, #64	@ 0x40
 80055c8:	4082      	lsls	r2, r0
 80055ca:	4313      	orrs	r3, r2
 80055cc:	3401      	adds	r4, #1
 80055ce:	9304      	str	r3, [sp, #16]
 80055d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055d4:	4824      	ldr	r0, [pc, #144]	@ (8005668 <_svfiprintf_r+0x1e8>)
 80055d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80055da:	2206      	movs	r2, #6
 80055dc:	f7fa fe20 	bl	8000220 <memchr>
 80055e0:	2800      	cmp	r0, #0
 80055e2:	d036      	beq.n	8005652 <_svfiprintf_r+0x1d2>
 80055e4:	4b21      	ldr	r3, [pc, #132]	@ (800566c <_svfiprintf_r+0x1ec>)
 80055e6:	bb1b      	cbnz	r3, 8005630 <_svfiprintf_r+0x1b0>
 80055e8:	9b03      	ldr	r3, [sp, #12]
 80055ea:	3307      	adds	r3, #7
 80055ec:	f023 0307 	bic.w	r3, r3, #7
 80055f0:	3308      	adds	r3, #8
 80055f2:	9303      	str	r3, [sp, #12]
 80055f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055f6:	4433      	add	r3, r6
 80055f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80055fa:	e76a      	b.n	80054d2 <_svfiprintf_r+0x52>
 80055fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005600:	460c      	mov	r4, r1
 8005602:	2001      	movs	r0, #1
 8005604:	e7a8      	b.n	8005558 <_svfiprintf_r+0xd8>
 8005606:	2300      	movs	r3, #0
 8005608:	3401      	adds	r4, #1
 800560a:	9305      	str	r3, [sp, #20]
 800560c:	4619      	mov	r1, r3
 800560e:	f04f 0c0a 	mov.w	ip, #10
 8005612:	4620      	mov	r0, r4
 8005614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005618:	3a30      	subs	r2, #48	@ 0x30
 800561a:	2a09      	cmp	r2, #9
 800561c:	d903      	bls.n	8005626 <_svfiprintf_r+0x1a6>
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0c6      	beq.n	80055b0 <_svfiprintf_r+0x130>
 8005622:	9105      	str	r1, [sp, #20]
 8005624:	e7c4      	b.n	80055b0 <_svfiprintf_r+0x130>
 8005626:	fb0c 2101 	mla	r1, ip, r1, r2
 800562a:	4604      	mov	r4, r0
 800562c:	2301      	movs	r3, #1
 800562e:	e7f0      	b.n	8005612 <_svfiprintf_r+0x192>
 8005630:	ab03      	add	r3, sp, #12
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	462a      	mov	r2, r5
 8005636:	4b0e      	ldr	r3, [pc, #56]	@ (8005670 <_svfiprintf_r+0x1f0>)
 8005638:	a904      	add	r1, sp, #16
 800563a:	4638      	mov	r0, r7
 800563c:	f3af 8000 	nop.w
 8005640:	1c42      	adds	r2, r0, #1
 8005642:	4606      	mov	r6, r0
 8005644:	d1d6      	bne.n	80055f4 <_svfiprintf_r+0x174>
 8005646:	89ab      	ldrh	r3, [r5, #12]
 8005648:	065b      	lsls	r3, r3, #25
 800564a:	f53f af2d 	bmi.w	80054a8 <_svfiprintf_r+0x28>
 800564e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005650:	e72c      	b.n	80054ac <_svfiprintf_r+0x2c>
 8005652:	ab03      	add	r3, sp, #12
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	462a      	mov	r2, r5
 8005658:	4b05      	ldr	r3, [pc, #20]	@ (8005670 <_svfiprintf_r+0x1f0>)
 800565a:	a904      	add	r1, sp, #16
 800565c:	4638      	mov	r0, r7
 800565e:	f000 f879 	bl	8005754 <_printf_i>
 8005662:	e7ed      	b.n	8005640 <_svfiprintf_r+0x1c0>
 8005664:	08005af4 	.word	0x08005af4
 8005668:	08005afe 	.word	0x08005afe
 800566c:	00000000 	.word	0x00000000
 8005670:	080053c9 	.word	0x080053c9
 8005674:	08005afa 	.word	0x08005afa

08005678 <_printf_common>:
 8005678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800567c:	4616      	mov	r6, r2
 800567e:	4698      	mov	r8, r3
 8005680:	688a      	ldr	r2, [r1, #8]
 8005682:	690b      	ldr	r3, [r1, #16]
 8005684:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005688:	4293      	cmp	r3, r2
 800568a:	bfb8      	it	lt
 800568c:	4613      	movlt	r3, r2
 800568e:	6033      	str	r3, [r6, #0]
 8005690:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005694:	4607      	mov	r7, r0
 8005696:	460c      	mov	r4, r1
 8005698:	b10a      	cbz	r2, 800569e <_printf_common+0x26>
 800569a:	3301      	adds	r3, #1
 800569c:	6033      	str	r3, [r6, #0]
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	0699      	lsls	r1, r3, #26
 80056a2:	bf42      	ittt	mi
 80056a4:	6833      	ldrmi	r3, [r6, #0]
 80056a6:	3302      	addmi	r3, #2
 80056a8:	6033      	strmi	r3, [r6, #0]
 80056aa:	6825      	ldr	r5, [r4, #0]
 80056ac:	f015 0506 	ands.w	r5, r5, #6
 80056b0:	d106      	bne.n	80056c0 <_printf_common+0x48>
 80056b2:	f104 0a19 	add.w	sl, r4, #25
 80056b6:	68e3      	ldr	r3, [r4, #12]
 80056b8:	6832      	ldr	r2, [r6, #0]
 80056ba:	1a9b      	subs	r3, r3, r2
 80056bc:	42ab      	cmp	r3, r5
 80056be:	dc26      	bgt.n	800570e <_printf_common+0x96>
 80056c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80056c4:	6822      	ldr	r2, [r4, #0]
 80056c6:	3b00      	subs	r3, #0
 80056c8:	bf18      	it	ne
 80056ca:	2301      	movne	r3, #1
 80056cc:	0692      	lsls	r2, r2, #26
 80056ce:	d42b      	bmi.n	8005728 <_printf_common+0xb0>
 80056d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80056d4:	4641      	mov	r1, r8
 80056d6:	4638      	mov	r0, r7
 80056d8:	47c8      	blx	r9
 80056da:	3001      	adds	r0, #1
 80056dc:	d01e      	beq.n	800571c <_printf_common+0xa4>
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	6922      	ldr	r2, [r4, #16]
 80056e2:	f003 0306 	and.w	r3, r3, #6
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	bf02      	ittt	eq
 80056ea:	68e5      	ldreq	r5, [r4, #12]
 80056ec:	6833      	ldreq	r3, [r6, #0]
 80056ee:	1aed      	subeq	r5, r5, r3
 80056f0:	68a3      	ldr	r3, [r4, #8]
 80056f2:	bf0c      	ite	eq
 80056f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056f8:	2500      	movne	r5, #0
 80056fa:	4293      	cmp	r3, r2
 80056fc:	bfc4      	itt	gt
 80056fe:	1a9b      	subgt	r3, r3, r2
 8005700:	18ed      	addgt	r5, r5, r3
 8005702:	2600      	movs	r6, #0
 8005704:	341a      	adds	r4, #26
 8005706:	42b5      	cmp	r5, r6
 8005708:	d11a      	bne.n	8005740 <_printf_common+0xc8>
 800570a:	2000      	movs	r0, #0
 800570c:	e008      	b.n	8005720 <_printf_common+0xa8>
 800570e:	2301      	movs	r3, #1
 8005710:	4652      	mov	r2, sl
 8005712:	4641      	mov	r1, r8
 8005714:	4638      	mov	r0, r7
 8005716:	47c8      	blx	r9
 8005718:	3001      	adds	r0, #1
 800571a:	d103      	bne.n	8005724 <_printf_common+0xac>
 800571c:	f04f 30ff 	mov.w	r0, #4294967295
 8005720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005724:	3501      	adds	r5, #1
 8005726:	e7c6      	b.n	80056b6 <_printf_common+0x3e>
 8005728:	18e1      	adds	r1, r4, r3
 800572a:	1c5a      	adds	r2, r3, #1
 800572c:	2030      	movs	r0, #48	@ 0x30
 800572e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005732:	4422      	add	r2, r4
 8005734:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005738:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800573c:	3302      	adds	r3, #2
 800573e:	e7c7      	b.n	80056d0 <_printf_common+0x58>
 8005740:	2301      	movs	r3, #1
 8005742:	4622      	mov	r2, r4
 8005744:	4641      	mov	r1, r8
 8005746:	4638      	mov	r0, r7
 8005748:	47c8      	blx	r9
 800574a:	3001      	adds	r0, #1
 800574c:	d0e6      	beq.n	800571c <_printf_common+0xa4>
 800574e:	3601      	adds	r6, #1
 8005750:	e7d9      	b.n	8005706 <_printf_common+0x8e>
	...

08005754 <_printf_i>:
 8005754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005758:	7e0f      	ldrb	r7, [r1, #24]
 800575a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800575c:	2f78      	cmp	r7, #120	@ 0x78
 800575e:	4691      	mov	r9, r2
 8005760:	4680      	mov	r8, r0
 8005762:	460c      	mov	r4, r1
 8005764:	469a      	mov	sl, r3
 8005766:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800576a:	d807      	bhi.n	800577c <_printf_i+0x28>
 800576c:	2f62      	cmp	r7, #98	@ 0x62
 800576e:	d80a      	bhi.n	8005786 <_printf_i+0x32>
 8005770:	2f00      	cmp	r7, #0
 8005772:	f000 80d1 	beq.w	8005918 <_printf_i+0x1c4>
 8005776:	2f58      	cmp	r7, #88	@ 0x58
 8005778:	f000 80b8 	beq.w	80058ec <_printf_i+0x198>
 800577c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005780:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005784:	e03a      	b.n	80057fc <_printf_i+0xa8>
 8005786:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800578a:	2b15      	cmp	r3, #21
 800578c:	d8f6      	bhi.n	800577c <_printf_i+0x28>
 800578e:	a101      	add	r1, pc, #4	@ (adr r1, 8005794 <_printf_i+0x40>)
 8005790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005794:	080057ed 	.word	0x080057ed
 8005798:	08005801 	.word	0x08005801
 800579c:	0800577d 	.word	0x0800577d
 80057a0:	0800577d 	.word	0x0800577d
 80057a4:	0800577d 	.word	0x0800577d
 80057a8:	0800577d 	.word	0x0800577d
 80057ac:	08005801 	.word	0x08005801
 80057b0:	0800577d 	.word	0x0800577d
 80057b4:	0800577d 	.word	0x0800577d
 80057b8:	0800577d 	.word	0x0800577d
 80057bc:	0800577d 	.word	0x0800577d
 80057c0:	080058ff 	.word	0x080058ff
 80057c4:	0800582b 	.word	0x0800582b
 80057c8:	080058b9 	.word	0x080058b9
 80057cc:	0800577d 	.word	0x0800577d
 80057d0:	0800577d 	.word	0x0800577d
 80057d4:	08005921 	.word	0x08005921
 80057d8:	0800577d 	.word	0x0800577d
 80057dc:	0800582b 	.word	0x0800582b
 80057e0:	0800577d 	.word	0x0800577d
 80057e4:	0800577d 	.word	0x0800577d
 80057e8:	080058c1 	.word	0x080058c1
 80057ec:	6833      	ldr	r3, [r6, #0]
 80057ee:	1d1a      	adds	r2, r3, #4
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6032      	str	r2, [r6, #0]
 80057f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80057fc:	2301      	movs	r3, #1
 80057fe:	e09c      	b.n	800593a <_printf_i+0x1e6>
 8005800:	6833      	ldr	r3, [r6, #0]
 8005802:	6820      	ldr	r0, [r4, #0]
 8005804:	1d19      	adds	r1, r3, #4
 8005806:	6031      	str	r1, [r6, #0]
 8005808:	0606      	lsls	r6, r0, #24
 800580a:	d501      	bpl.n	8005810 <_printf_i+0xbc>
 800580c:	681d      	ldr	r5, [r3, #0]
 800580e:	e003      	b.n	8005818 <_printf_i+0xc4>
 8005810:	0645      	lsls	r5, r0, #25
 8005812:	d5fb      	bpl.n	800580c <_printf_i+0xb8>
 8005814:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005818:	2d00      	cmp	r5, #0
 800581a:	da03      	bge.n	8005824 <_printf_i+0xd0>
 800581c:	232d      	movs	r3, #45	@ 0x2d
 800581e:	426d      	negs	r5, r5
 8005820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005824:	4858      	ldr	r0, [pc, #352]	@ (8005988 <_printf_i+0x234>)
 8005826:	230a      	movs	r3, #10
 8005828:	e011      	b.n	800584e <_printf_i+0xfa>
 800582a:	6821      	ldr	r1, [r4, #0]
 800582c:	6833      	ldr	r3, [r6, #0]
 800582e:	0608      	lsls	r0, r1, #24
 8005830:	f853 5b04 	ldr.w	r5, [r3], #4
 8005834:	d402      	bmi.n	800583c <_printf_i+0xe8>
 8005836:	0649      	lsls	r1, r1, #25
 8005838:	bf48      	it	mi
 800583a:	b2ad      	uxthmi	r5, r5
 800583c:	2f6f      	cmp	r7, #111	@ 0x6f
 800583e:	4852      	ldr	r0, [pc, #328]	@ (8005988 <_printf_i+0x234>)
 8005840:	6033      	str	r3, [r6, #0]
 8005842:	bf14      	ite	ne
 8005844:	230a      	movne	r3, #10
 8005846:	2308      	moveq	r3, #8
 8005848:	2100      	movs	r1, #0
 800584a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800584e:	6866      	ldr	r6, [r4, #4]
 8005850:	60a6      	str	r6, [r4, #8]
 8005852:	2e00      	cmp	r6, #0
 8005854:	db05      	blt.n	8005862 <_printf_i+0x10e>
 8005856:	6821      	ldr	r1, [r4, #0]
 8005858:	432e      	orrs	r6, r5
 800585a:	f021 0104 	bic.w	r1, r1, #4
 800585e:	6021      	str	r1, [r4, #0]
 8005860:	d04b      	beq.n	80058fa <_printf_i+0x1a6>
 8005862:	4616      	mov	r6, r2
 8005864:	fbb5 f1f3 	udiv	r1, r5, r3
 8005868:	fb03 5711 	mls	r7, r3, r1, r5
 800586c:	5dc7      	ldrb	r7, [r0, r7]
 800586e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005872:	462f      	mov	r7, r5
 8005874:	42bb      	cmp	r3, r7
 8005876:	460d      	mov	r5, r1
 8005878:	d9f4      	bls.n	8005864 <_printf_i+0x110>
 800587a:	2b08      	cmp	r3, #8
 800587c:	d10b      	bne.n	8005896 <_printf_i+0x142>
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	07df      	lsls	r7, r3, #31
 8005882:	d508      	bpl.n	8005896 <_printf_i+0x142>
 8005884:	6923      	ldr	r3, [r4, #16]
 8005886:	6861      	ldr	r1, [r4, #4]
 8005888:	4299      	cmp	r1, r3
 800588a:	bfde      	ittt	le
 800588c:	2330      	movle	r3, #48	@ 0x30
 800588e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005892:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005896:	1b92      	subs	r2, r2, r6
 8005898:	6122      	str	r2, [r4, #16]
 800589a:	f8cd a000 	str.w	sl, [sp]
 800589e:	464b      	mov	r3, r9
 80058a0:	aa03      	add	r2, sp, #12
 80058a2:	4621      	mov	r1, r4
 80058a4:	4640      	mov	r0, r8
 80058a6:	f7ff fee7 	bl	8005678 <_printf_common>
 80058aa:	3001      	adds	r0, #1
 80058ac:	d14a      	bne.n	8005944 <_printf_i+0x1f0>
 80058ae:	f04f 30ff 	mov.w	r0, #4294967295
 80058b2:	b004      	add	sp, #16
 80058b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	f043 0320 	orr.w	r3, r3, #32
 80058be:	6023      	str	r3, [r4, #0]
 80058c0:	4832      	ldr	r0, [pc, #200]	@ (800598c <_printf_i+0x238>)
 80058c2:	2778      	movs	r7, #120	@ 0x78
 80058c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	6831      	ldr	r1, [r6, #0]
 80058cc:	061f      	lsls	r7, r3, #24
 80058ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80058d2:	d402      	bmi.n	80058da <_printf_i+0x186>
 80058d4:	065f      	lsls	r7, r3, #25
 80058d6:	bf48      	it	mi
 80058d8:	b2ad      	uxthmi	r5, r5
 80058da:	6031      	str	r1, [r6, #0]
 80058dc:	07d9      	lsls	r1, r3, #31
 80058de:	bf44      	itt	mi
 80058e0:	f043 0320 	orrmi.w	r3, r3, #32
 80058e4:	6023      	strmi	r3, [r4, #0]
 80058e6:	b11d      	cbz	r5, 80058f0 <_printf_i+0x19c>
 80058e8:	2310      	movs	r3, #16
 80058ea:	e7ad      	b.n	8005848 <_printf_i+0xf4>
 80058ec:	4826      	ldr	r0, [pc, #152]	@ (8005988 <_printf_i+0x234>)
 80058ee:	e7e9      	b.n	80058c4 <_printf_i+0x170>
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	f023 0320 	bic.w	r3, r3, #32
 80058f6:	6023      	str	r3, [r4, #0]
 80058f8:	e7f6      	b.n	80058e8 <_printf_i+0x194>
 80058fa:	4616      	mov	r6, r2
 80058fc:	e7bd      	b.n	800587a <_printf_i+0x126>
 80058fe:	6833      	ldr	r3, [r6, #0]
 8005900:	6825      	ldr	r5, [r4, #0]
 8005902:	6961      	ldr	r1, [r4, #20]
 8005904:	1d18      	adds	r0, r3, #4
 8005906:	6030      	str	r0, [r6, #0]
 8005908:	062e      	lsls	r6, r5, #24
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	d501      	bpl.n	8005912 <_printf_i+0x1be>
 800590e:	6019      	str	r1, [r3, #0]
 8005910:	e002      	b.n	8005918 <_printf_i+0x1c4>
 8005912:	0668      	lsls	r0, r5, #25
 8005914:	d5fb      	bpl.n	800590e <_printf_i+0x1ba>
 8005916:	8019      	strh	r1, [r3, #0]
 8005918:	2300      	movs	r3, #0
 800591a:	6123      	str	r3, [r4, #16]
 800591c:	4616      	mov	r6, r2
 800591e:	e7bc      	b.n	800589a <_printf_i+0x146>
 8005920:	6833      	ldr	r3, [r6, #0]
 8005922:	1d1a      	adds	r2, r3, #4
 8005924:	6032      	str	r2, [r6, #0]
 8005926:	681e      	ldr	r6, [r3, #0]
 8005928:	6862      	ldr	r2, [r4, #4]
 800592a:	2100      	movs	r1, #0
 800592c:	4630      	mov	r0, r6
 800592e:	f7fa fc77 	bl	8000220 <memchr>
 8005932:	b108      	cbz	r0, 8005938 <_printf_i+0x1e4>
 8005934:	1b80      	subs	r0, r0, r6
 8005936:	6060      	str	r0, [r4, #4]
 8005938:	6863      	ldr	r3, [r4, #4]
 800593a:	6123      	str	r3, [r4, #16]
 800593c:	2300      	movs	r3, #0
 800593e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005942:	e7aa      	b.n	800589a <_printf_i+0x146>
 8005944:	6923      	ldr	r3, [r4, #16]
 8005946:	4632      	mov	r2, r6
 8005948:	4649      	mov	r1, r9
 800594a:	4640      	mov	r0, r8
 800594c:	47d0      	blx	sl
 800594e:	3001      	adds	r0, #1
 8005950:	d0ad      	beq.n	80058ae <_printf_i+0x15a>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	079b      	lsls	r3, r3, #30
 8005956:	d413      	bmi.n	8005980 <_printf_i+0x22c>
 8005958:	68e0      	ldr	r0, [r4, #12]
 800595a:	9b03      	ldr	r3, [sp, #12]
 800595c:	4298      	cmp	r0, r3
 800595e:	bfb8      	it	lt
 8005960:	4618      	movlt	r0, r3
 8005962:	e7a6      	b.n	80058b2 <_printf_i+0x15e>
 8005964:	2301      	movs	r3, #1
 8005966:	4632      	mov	r2, r6
 8005968:	4649      	mov	r1, r9
 800596a:	4640      	mov	r0, r8
 800596c:	47d0      	blx	sl
 800596e:	3001      	adds	r0, #1
 8005970:	d09d      	beq.n	80058ae <_printf_i+0x15a>
 8005972:	3501      	adds	r5, #1
 8005974:	68e3      	ldr	r3, [r4, #12]
 8005976:	9903      	ldr	r1, [sp, #12]
 8005978:	1a5b      	subs	r3, r3, r1
 800597a:	42ab      	cmp	r3, r5
 800597c:	dcf2      	bgt.n	8005964 <_printf_i+0x210>
 800597e:	e7eb      	b.n	8005958 <_printf_i+0x204>
 8005980:	2500      	movs	r5, #0
 8005982:	f104 0619 	add.w	r6, r4, #25
 8005986:	e7f5      	b.n	8005974 <_printf_i+0x220>
 8005988:	08005b05 	.word	0x08005b05
 800598c:	08005b16 	.word	0x08005b16

08005990 <memmove>:
 8005990:	4288      	cmp	r0, r1
 8005992:	b510      	push	{r4, lr}
 8005994:	eb01 0402 	add.w	r4, r1, r2
 8005998:	d902      	bls.n	80059a0 <memmove+0x10>
 800599a:	4284      	cmp	r4, r0
 800599c:	4623      	mov	r3, r4
 800599e:	d807      	bhi.n	80059b0 <memmove+0x20>
 80059a0:	1e43      	subs	r3, r0, #1
 80059a2:	42a1      	cmp	r1, r4
 80059a4:	d008      	beq.n	80059b8 <memmove+0x28>
 80059a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059ae:	e7f8      	b.n	80059a2 <memmove+0x12>
 80059b0:	4402      	add	r2, r0
 80059b2:	4601      	mov	r1, r0
 80059b4:	428a      	cmp	r2, r1
 80059b6:	d100      	bne.n	80059ba <memmove+0x2a>
 80059b8:	bd10      	pop	{r4, pc}
 80059ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059c2:	e7f7      	b.n	80059b4 <memmove+0x24>

080059c4 <_sbrk_r>:
 80059c4:	b538      	push	{r3, r4, r5, lr}
 80059c6:	4d06      	ldr	r5, [pc, #24]	@ (80059e0 <_sbrk_r+0x1c>)
 80059c8:	2300      	movs	r3, #0
 80059ca:	4604      	mov	r4, r0
 80059cc:	4608      	mov	r0, r1
 80059ce:	602b      	str	r3, [r5, #0]
 80059d0:	f7fc fb12 	bl	8001ff8 <_sbrk>
 80059d4:	1c43      	adds	r3, r0, #1
 80059d6:	d102      	bne.n	80059de <_sbrk_r+0x1a>
 80059d8:	682b      	ldr	r3, [r5, #0]
 80059da:	b103      	cbz	r3, 80059de <_sbrk_r+0x1a>
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	bd38      	pop	{r3, r4, r5, pc}
 80059e0:	200002d4 	.word	0x200002d4

080059e4 <memcpy>:
 80059e4:	440a      	add	r2, r1
 80059e6:	4291      	cmp	r1, r2
 80059e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80059ec:	d100      	bne.n	80059f0 <memcpy+0xc>
 80059ee:	4770      	bx	lr
 80059f0:	b510      	push	{r4, lr}
 80059f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059fa:	4291      	cmp	r1, r2
 80059fc:	d1f9      	bne.n	80059f2 <memcpy+0xe>
 80059fe:	bd10      	pop	{r4, pc}

08005a00 <_realloc_r>:
 8005a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a04:	4607      	mov	r7, r0
 8005a06:	4614      	mov	r4, r2
 8005a08:	460d      	mov	r5, r1
 8005a0a:	b921      	cbnz	r1, 8005a16 <_realloc_r+0x16>
 8005a0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a10:	4611      	mov	r1, r2
 8005a12:	f7ff bc4d 	b.w	80052b0 <_malloc_r>
 8005a16:	b92a      	cbnz	r2, 8005a24 <_realloc_r+0x24>
 8005a18:	f7ff fbde 	bl	80051d8 <_free_r>
 8005a1c:	4625      	mov	r5, r4
 8005a1e:	4628      	mov	r0, r5
 8005a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a24:	f000 f81a 	bl	8005a5c <_malloc_usable_size_r>
 8005a28:	4284      	cmp	r4, r0
 8005a2a:	4606      	mov	r6, r0
 8005a2c:	d802      	bhi.n	8005a34 <_realloc_r+0x34>
 8005a2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a32:	d8f4      	bhi.n	8005a1e <_realloc_r+0x1e>
 8005a34:	4621      	mov	r1, r4
 8005a36:	4638      	mov	r0, r7
 8005a38:	f7ff fc3a 	bl	80052b0 <_malloc_r>
 8005a3c:	4680      	mov	r8, r0
 8005a3e:	b908      	cbnz	r0, 8005a44 <_realloc_r+0x44>
 8005a40:	4645      	mov	r5, r8
 8005a42:	e7ec      	b.n	8005a1e <_realloc_r+0x1e>
 8005a44:	42b4      	cmp	r4, r6
 8005a46:	4622      	mov	r2, r4
 8005a48:	4629      	mov	r1, r5
 8005a4a:	bf28      	it	cs
 8005a4c:	4632      	movcs	r2, r6
 8005a4e:	f7ff ffc9 	bl	80059e4 <memcpy>
 8005a52:	4629      	mov	r1, r5
 8005a54:	4638      	mov	r0, r7
 8005a56:	f7ff fbbf 	bl	80051d8 <_free_r>
 8005a5a:	e7f1      	b.n	8005a40 <_realloc_r+0x40>

08005a5c <_malloc_usable_size_r>:
 8005a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a60:	1f18      	subs	r0, r3, #4
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	bfbc      	itt	lt
 8005a66:	580b      	ldrlt	r3, [r1, r0]
 8005a68:	18c0      	addlt	r0, r0, r3
 8005a6a:	4770      	bx	lr

08005a6c <_init>:
 8005a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6e:	bf00      	nop
 8005a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a72:	bc08      	pop	{r3}
 8005a74:	469e      	mov	lr, r3
 8005a76:	4770      	bx	lr

08005a78 <_fini>:
 8005a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7a:	bf00      	nop
 8005a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a7e:	bc08      	pop	{r3}
 8005a80:	469e      	mov	lr, r3
 8005a82:	4770      	bx	lr
